import "./chunk-6JXB6ZNQ.js";
import {
  Teleport,
  Transition,
  cloneVNode,
  computed,
  defineComponent,
  h,
  inject,
  onBeforeMount,
  onBeforeUnmount,
  onMounted,
  onUnmounted,
  onUpdated,
  provide,
  reactive,
  ref,
  toRefs,
  vShow,
  watch,
  withDirectives
} from "./chunk-VM65JGXE.js";
import "./chunk-S5KM4IGW.js";

// node_modules/@coreui/vue/dist/index.es.js
var CAccordion = defineComponent({
  name: "CAccordion",
  props: {
    activeItemKey: {
      type: [Number, String],
      default: void 0,
      require: false
    },
    alwaysOpen: Boolean,
    flush: Boolean
  },
  setup(props, { slots }) {
    const activeItemKey = ref(props.activeItemKey);
    const setActiveItemKey = (key) => {
      activeItemKey.value = key;
    };
    provide("activeItemKey", activeItemKey);
    provide("alwaysOpen", props.alwaysOpen);
    provide("setActiveItemKey", setActiveItemKey);
    return () => h("div", { class: ["accordion", { ["accordion-flush"]: props.flush }] }, slots.default && slots.default());
  }
});
var vVisible = {
  beforeMount(el, { value }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
        });
      }
    }
  }
};
var execute = (callback) => {
  if (typeof callback === "function") {
    callback();
  }
};
var executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
  if (!waitForTransition) {
    execute(callback);
    return;
  }
  const durationPadding = 5;
  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  let called = false;
  const handler = ({ target }) => {
    if (target !== transitionElement) {
      return;
    }
    called = true;
    transitionElement.removeEventListener("transitionend", handler);
    execute(callback);
  };
  transitionElement.addEventListener("transitionend", handler);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
var getTransitionDurationFromElement = (element) => {
  if (!element) {
    return 0;
  }
  let { transitionDuration, transitionDelay } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay);
  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  }
  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1e3;
};
var triggerTransitionEnd = (element) => {
  element.dispatchEvent(new Event("transitionend"));
};
var CCollapse = defineComponent({
  name: "CCollapse",
  props: {
    horizontal: {
      type: Boolean,
      required: false
    },
    visible: {
      type: Boolean,
      required: false
    }
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const collapsing = ref(false);
    const show = ref(props.visible);
    const handleBeforeEnter = () => {
      collapsing.value = true;
    };
    const handleEnter = (el, done) => {
      emit("show");
      setTimeout(() => {
        executeAfterTransition(() => done(), el);
        if (props.horizontal) {
          el.style.width = `${el.scrollWidth}px`;
          return;
        }
        el.style.height = `${el.scrollHeight}px`;
      }, 1);
    };
    const handleAfterEnter = (el) => {
      show.value = true;
      collapsing.value = false;
      props.horizontal ? el.style.removeProperty("width") : el.style.removeProperty("height");
    };
    const handleBeforeLeave = (el) => {
      collapsing.value = true;
      show.value = false;
      if (props.horizontal) {
        el.style.width = `${el.scrollWidth}px`;
        return;
      }
      el.style.height = `${el.scrollHeight}px`;
    };
    const handleLeave = (el, done) => {
      emit("hide");
      setTimeout(() => {
        executeAfterTransition(() => done(), el);
        if (props.horizontal) {
          el.style.width = "0px";
          return;
        }
        el.style.height = "0px";
      }, 1);
    };
    const handleAfterLeave = (el) => {
      collapsing.value = false;
      props.horizontal ? el.style.removeProperty("width") : el.style.removeProperty("height");
    };
    return () => h(Transition, {
      css: false,
      onBeforeEnter: () => handleBeforeEnter(),
      onEnter: (el, done) => handleEnter(el, done),
      onAfterEnter: (el) => handleAfterEnter(el),
      onBeforeLeave: (el) => handleBeforeLeave(el),
      onLeave: (el, done) => handleLeave(el, done),
      onAfterLeave: (el) => handleAfterLeave(el)
    }, () => withDirectives(h("div", {
      class: [
        collapsing.value ? "collapsing" : "collapse",
        { "collapse-horizontal": props.horizontal, show: show.value }
      ]
    }, slots.default && slots.default()), [[vVisible, props.visible]]));
  }
});
var CAccordionBody = defineComponent({
  name: "CAccordionBody",
  setup(_2, { slots }) {
    const visible = inject("visible");
    return () => h(CCollapse, { class: "accordion-collapse", visible: visible.value }, {
      default: () => h("div", { class: ["accordion-body"] }, slots.default && slots.default())
    });
  }
});
var CAccordionButton = defineComponent({
  name: "CAccordionButton",
  setup(_2, { slots }) {
    const toggleVisibility = inject("toggleVisibility");
    const visible = inject("visible");
    return () => h("button", {
      type: "button",
      "aria-expanded": !visible.value,
      class: ["accordion-button", { ["collapsed"]: !visible.value }],
      onClick: () => toggleVisibility()
    }, slots.default && slots.default());
  }
});
var CAccordionHeader = defineComponent({
  name: "CAccordionHeader",
  setup(_2, { slots }) {
    return () => h("div", { class: ["accordion-header"] }, h(CAccordionButton, {}, {
      default: () => slots.default && slots.default()
    }));
  }
});
var CAccordionItem = defineComponent({
  name: "CAccordionItem",
  props: {
    itemKey: {
      type: [Number, String],
      default: void 0,
      require: false
    }
  },
  setup(props, { slots }) {
    const activeItemKey = inject("activeItemKey");
    const alwaysOpen = inject("alwaysOpen");
    const setActiveItemKey = inject("setActiveItemKey");
    const itemKey = ref(props.itemKey ? props.itemKey : Math.random().toString(36).substr(2, 9));
    const visible = ref(Boolean(activeItemKey.value === itemKey.value));
    watch(activeItemKey, () => visible.value = Boolean(activeItemKey.value === itemKey.value));
    const toggleVisibility = () => {
      visible.value = !visible.value;
      !alwaysOpen && visible && setActiveItemKey(itemKey.value);
    };
    provide("visible", visible);
    provide("toggleVisibility", toggleVisibility);
    return () => h("div", { class: ["accordion-item"] }, slots.default && slots.default());
  }
});
var CAccordionPlugin = {
  install: (app) => {
    app.component(CAccordion.name, CAccordion);
    app.component(CAccordionBody.name, CAccordionBody);
    app.component(CAccordionButton.name, CAccordionButton);
    app.component(CAccordionHeader.name, CAccordionHeader);
    app.component(CAccordionItem.name, CAccordionItem);
  }
};
var Shape = {
  type: String,
  validator: (value) => {
    return [
      "rounded",
      "rounded-top",
      "rounded-end",
      "rounded-bottom",
      "rounded-start",
      "rounded-circle",
      "rounded-pill",
      "rounded-0",
      "rounded-1",
      "rounded-2",
      "rounded-3"
    ].includes(value);
  }
};
var Color = {
  type: String,
  validator: (value) => {
    return [
      "primary",
      "secondary",
      "success",
      "danger",
      "warning",
      "info",
      "dark",
      "light",
      "link",
      "transparent"
    ].includes(value);
  }
};
var TextColor = {
  type: String,
  validator: (value) => {
    return [
      "primary",
      "secondary",
      "success",
      "danger",
      "warning",
      "info",
      "dark",
      "light",
      "white",
      "muted",
      "high-emphasis",
      "medium-emphasis",
      "disabled",
      "high-emphasis-inverse",
      "medium-emphasis-inverse",
      "disabled-inverse"
    ].includes(value);
  }
};
var CCloseButton = defineComponent({
  name: "CCloseButton",
  props: {
    disabled: {
      type: Boolean,
      required: false
    },
    white: {
      type: Boolean,
      required: false
    }
  },
  emits: [
    "click"
  ],
  setup(props, { emit }) {
    const handleClick = () => {
      if (props.disabled) {
        return;
      }
      emit("click");
    };
    return () => h("button", {
      type: "button",
      class: [
        "btn",
        "btn-close",
        {
          ["btn-close-white"]: props.white
        },
        props.disabled
      ],
      "aria-label": "Close",
      disabled: props.disabled,
      onClick: handleClick
    });
  }
});
var CAlert = defineComponent({
  name: "CAlert",
  props: {
    color: Color,
    dismissible: {
      type: Boolean,
      default: false,
      required: false
    },
    variant: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return value === "solid";
      }
    },
    visible: {
      type: Boolean,
      default: true,
      required: false
    }
  },
  emits: [
    "close"
  ],
  setup(props, { slots, emit }) {
    const visible = ref(props.visible);
    watch(() => props.visible, () => {
      visible.value = props.visible;
    });
    const handleDismiss = () => {
      visible.value = false;
      emit("close");
    };
    return () => h(Transition, {
      name: "fade",
      duration: 350,
      enterFromClass: "",
      enterActiveClass: "fade",
      enterToClass: "fade show",
      leaveActiveClass: "fade"
    }, {
      default: () => visible.value && h("div", {
        class: [
          "alert",
          props.variant === "solid" ? `bg-${props.color} text-white border-0` : `alert-${props.color}`,
          {
            [`alert-${props.color}`]: props.color,
            "alert-dismissible": props.dismissible
          }
        ]
      }, [
        slots.default && slots.default(),
        props.dismissible && h(CCloseButton, {
          onClick: () => {
            handleDismiss();
          }
        })
      ])
    });
  }
});
var CAlertHeading = defineComponent({
  name: "CAlertHeading",
  props: {
    component: {
      type: String,
      default: "h4",
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: "alert-heading"
    }, slots);
  }
});
var CAlertLink = defineComponent({
  name: "CAlertLink",
  setup(_2, { slots }) {
    return () => h("a", {
      class: "alert-link"
    }, slots);
  }
});
var CAlertPlugin = {
  install: (app) => {
    app.component(CAlert.name, CAlert);
    app.component(CAlertHeading.name, CAlertHeading);
    app.component(CAlertLink.name, CAlertLink);
  }
};
var CAvatar = defineComponent({
  name: "CAvatar",
  props: {
    color: Color,
    shape: Shape,
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "md", "lg", "xl"].includes(value);
      }
    },
    src: {
      type: String,
      default: void 0,
      required: false
    },
    status: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return [
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "dark",
          "light"
        ].includes(value);
      }
    },
    textColor: TextColor
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "avatar",
        {
          [`bg-${props.color}`]: props.color,
          [`avatar-${props.size}`]: props.size,
          [`text-${props.textColor}`]: props.textColor
        },
        `${props.shape}`
      ]
    }, [
      props.src ? h("img", { src: props.src, class: "avatar-img" }) : slots.default && slots.default(),
      props.status && h("span", { class: ["avatar-status", `bg-${props.status}`] })
    ]);
  }
});
var CAvatarPlugin = {
  install: (app) => {
    app.component(CAvatar.name, CAvatar);
  }
};
var CBackdrop = defineComponent({
  name: "CBackdrop",
  props: {
    visible: {
      type: Boolean,
      default: false,
      required: false
    }
  },
  setup(props) {
    const handleBeforeEnter = (el) => {
      el.classList.remove("d-none");
    };
    const handleEnter = (el, done) => {
      executeAfterTransition(() => done(), el);
      setTimeout(() => {
        el.style.visibility = "visible";
        el.classList.add("show");
      }, 1);
    };
    const handleLeave = (el, done) => {
      executeAfterTransition(() => done(), el);
      el.classList.remove("show");
    };
    const handleAfterLeave = (el) => {
      el.classList.add("d-none");
    };
    return () => h(Transition, {
      onBeforeEnter: (el) => handleBeforeEnter(el),
      onEnter: (el, done) => handleEnter(el, done),
      onLeave: (el, done) => handleLeave(el, done),
      onAfterLeave: (el) => handleAfterLeave(el)
    }, () => props.visible && h("div", {
      class: "fade"
    }));
  }
});
var CBackdropPlugin = {
  install: (app) => {
    app.component(CBackdrop.name, CBackdrop);
  }
};
var CBadge = defineComponent({
  name: "CBadge",
  props: {
    color: Color,
    component: {
      type: String,
      required: false,
      default: "span"
    },
    position: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["top-start", "top-end", "bottom-end", "bottom-start"].includes(value);
      }
    },
    shape: Shape,
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return value === "sm";
      }
    },
    textColor: TextColor
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        "badge",
        {
          [`bg-${props.color}`]: props.color,
          "position-absolute translate-middle": props.position,
          "top-0": props.position && props.position.includes("top"),
          "top-100": props.position && props.position.includes("bottom"),
          "start-100": props.position && props.position.includes("end"),
          "start-0": props.position && props.position.includes("start"),
          [`badge-${props.size}`]: props.size,
          [`text-${props.textColor}`]: props.textColor
        },
        props.shape
      ]
    }, slots.default && slots.default());
  }
});
var CBadgePlugin = {
  install: (app) => {
    app.component(CBadge.name, CBadge);
  }
};
var CBreadcrumbItem = defineComponent({
  name: "CBreadcrumbItem",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h("li", {
      class: [
        "breadcrumb-item",
        {
          active: props.active
        }
      ],
      ...props.active && { "aria-current": "page" }
    }, props.href ? h("a", { href: props.href }, slots.default && slots.default()) : slots.default && slots.default());
  }
});
var CBreadcrumb = defineComponent({
  name: "CBreadcrumb",
  setup(_2, { slots, attrs }) {
    return () => h("nav", {
      "aria-label": "breadcrumb"
    }, h("ol", { class: ["breadcrumb", attrs.class] }, slots.default && slots.default()));
  }
});
var CBreadcrumbPlugin = {
  install: (app) => {
    app.component(CBreadcrumb.name, CBreadcrumb);
    app.component(CBreadcrumbItem.name, CBreadcrumbItem);
  }
};
var CButton = defineComponent({
  name: "CButton",
  props: {
    active: {
      type: Boolean,
      default: false,
      required: false
    },
    color: Color,
    component: {
      type: String,
      default: "button",
      required: false
    },
    disabled: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    },
    shape: Shape,
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    },
    type: {
      type: String,
      default: "button",
      required: false,
      validator: (value) => {
        return ["button", "submit", "reset"].includes(value);
      }
    },
    variant: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["ghost", "outline"].includes(value);
      }
    }
  },
  emits: [
    "click"
  ],
  setup(props, { emit, slots }) {
    const handleClick = (event) => {
      if (props.disabled) {
        return;
      }
      emit("click", event);
    };
    return () => h(props.component, {
      class: [
        "btn",
        props.variant ? `btn-${props.variant}-${props.color}` : `btn-${props.color}`,
        {
          [`btn-${props.size}`]: props.size,
          active: props.active,
          disabled: props.disabled
        },
        props.shape
      ],
      disabled: props.disabled && props.component !== "a",
      ...props.component === "a" && props.disabled && { "aria-disabled": true, tabIndex: -1 },
      ...props.component === "a" && props.href && { href: props.href },
      ...props.component === "button" && { type: props.type },
      onClick: handleClick
    }, slots.default && slots.default());
  }
});
var CButtonPlugin = {
  install: (app) => {
    app.component(CButton.name, CButton);
  }
};
var CButtonToolbar = defineComponent({
  name: "CButtonToolbar",
  setup(_2, { slots }) {
    return () => h("div", { class: "btn-toolbar" }, slots.default && slots.default());
  }
});
var CButtonGroup = defineComponent({
  name: "CButtonGroup",
  props: {
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    },
    vertical: {
      type: Boolean,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        props.vertical ? "btn-group-vertical" : "btn-group",
        { [`btn-group-${props.size}`]: props.size }
      ]
    }, slots.default && slots.default());
  }
});
var CButtonGroupPlugin = {
  install: (app) => {
    app.component(CButtonToolbar.name, CButtonToolbar);
    app.component(CButtonGroup.name, CButtonGroup);
  }
};
var CCallout = defineComponent({
  name: "CCallout",
  props: {
    color: Color
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "callout",
        {
          [`callout-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var CCalloutPlugin = {
  install: (app) => {
    app.component(CCallout.name, CCallout);
  }
};
var CCard = defineComponent({
  name: "CCard",
  props: {
    color: Color,
    textColor: TextColor
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "card",
        {
          [`bg-${props.color}`]: props.color,
          [`text-${props.textColor}`]: props.textColor
        }
      ]
    }, slots.default && slots.default());
  }
});
var CCardBody = defineComponent({
  name: "CCardBody",
  setup(_2, { slots }) {
    return () => h("div", { class: "card-body" }, slots.default && slots.default());
  }
});
var CCardFooter = defineComponent({
  name: "CCardFooter",
  setup(_2, { slots }) {
    return () => h("div", { class: "card-footer" }, slots.default && slots.default());
  }
});
var CCardGroup = defineComponent({
  name: "CCardGroup",
  setup(_2, { slots }) {
    return () => h("div", { class: "card-group" }, slots.default && slots.default());
  }
});
var CCardHeader = defineComponent({
  name: "CCardHeader",
  props: {
    component: {
      type: String,
      required: false,
      default: "div"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "card-header" }, slots.default && slots.default());
  }
});
var CCardImage = defineComponent({
  name: "CCardImage",
  props: {
    component: {
      type: String,
      required: false,
      default: "img"
    },
    orientation: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["top", "bottom"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: `card-img${props.orientation ? `-${props.orientation}` : ""}`
    }, slots.default && slots.default());
  }
});
var CCardImageOverlay = defineComponent({
  name: "CCardImageOverlay",
  setup(_2, { slots }) {
    return () => h("div", { class: "card-img-overlay" }, slots.default && slots.default());
  }
});
var CLink = defineComponent({
  name: "CLink",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    component: {
      type: String,
      required: false,
      default: "a"
    },
    disabled: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  emits: [
    "click"
  ],
  setup(props, { slots, emit }) {
    const handleClick = () => {
      emit("click", props.href);
    };
    return () => h(props.component, {
      class: [{ active: props.active, disabled: props.disabled }],
      ...props.active && { "aria-current": "page" },
      ...props.component === "a" && props.disabled && { "aria-disabled": true, tabIndex: -1 },
      ...(props.component === "a" || props.component === "button") && {
        onClick: handleClick
      },
      href: props.href
    }, slots.default && slots.default());
  }
});
var CCLinkPlugin = {
  install: (app) => {
    app.component(CLink.name, CLink);
  }
};
var CCardLink = defineComponent({
  name: "CCardLink",
  props: {
    href: {
      type: String,
      default: "#",
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(CLink, { class: "card-link", href: props.href }, { default: () => slots.default && slots.default() });
  }
});
var CCardSubtitle = defineComponent({
  name: "CCardSubtitle",
  props: {
    component: {
      type: String,
      required: false,
      default: "h6"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "card-subtitle" }, slots.default && slots.default());
  }
});
var CCardText = defineComponent({
  name: "CCardText",
  props: {
    component: {
      type: String,
      required: false,
      default: "p"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "card-text" }, slots.default && slots.default());
  }
});
var CCardTitle = defineComponent({
  name: "CCardTitle",
  props: {
    component: {
      type: String,
      required: false,
      default: "h5"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "card-title" }, slots.default && slots.default());
  }
});
var CCardPlugin = {
  install: (app) => {
    app.component(CCard.name, CCard);
    app.component(CCardBody.name, CCardBody);
    app.component(CCardFooter.name, CCardFooter);
    app.component(CCardGroup.name, CCardGroup);
    app.component(CCardHeader.name, CCardHeader);
    app.component(CCardImage.name, CCardImage);
    app.component(CCardImageOverlay.name, CCardImageOverlay);
    app.component(CCardLink.name, CCardLink);
    app.component(CCardSubtitle.name, CCardSubtitle);
    app.component(CCardText.name, CCardText);
    app.component(CCardTitle.name, CCardTitle);
  }
};
var isVisible$1 = (element) => {
  const rect = element.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var CCarousel = defineComponent({
  name: "CCarousel",
  props: {
    controls: Boolean,
    dark: Boolean,
    index: {
      type: Number,
      default: 0,
      required: false
    },
    indicators: Boolean,
    interval: {
      type: [Boolean, Number],
      default: 5e3,
      required: false
    },
    pause: {
      type: [Boolean, String],
      default: "hover",
      required: false,
      validator: (value) => {
        return typeof value === "boolean" || value === "hover";
      }
    },
    transition: {
      type: String,
      default: "slide",
      required: false,
      validator: (value) => {
        return ["crossfade", "slide"].includes(value);
      }
    },
    wrap: {
      type: Boolean,
      default: true,
      required: false
    }
  },
  setup(props, { slots }) {
    const carouselRef = ref();
    const timeout = ref();
    const animating = ref(false);
    const visible = ref();
    const customInterval = ref(props.interval);
    const setAnimating = (value) => {
      animating.value = value;
    };
    const setCustomInterval = (value) => {
      customInterval.value = value;
    };
    provide("setAnimating", setAnimating);
    provide("setCustomInterval", setCustomInterval);
    const pause = () => timeout.value && clearInterval(timeout.value);
    const cycle = () => {
      pause();
      if (typeof props.interval === "number") {
        timeout.value = setTimeout(() => nextItemWhenVisible(), typeof customInterval.value === "number" ? customInterval.value : props.interval);
      }
    };
    const state = reactive({
      items: [],
      active: props.index,
      direction: "next"
    });
    onBeforeMount(() => {
      if (slots.default) {
        state.items = slots.default().filter((child) => child.type.name === "CCarouselItem");
      }
    });
    const handleControlClick = (direction) => {
      if (animating.value) {
        return;
      }
      state.direction = direction;
      if (direction === "next") {
        state.active === state.items.length - 1 ? state.active = 0 : state.active++;
      } else {
        state.active === 0 ? state.active = state.items.length - 1 : state.active--;
      }
    };
    const nextItemWhenVisible = () => {
      if (!document.hidden && isVisible$1(carouselRef.value)) {
        handleControlClick("next");
      }
    };
    const handleIndicatorClick = (index) => {
      if (state.active === index) {
        return;
      }
      if (state.active < index) {
        state.direction = "next";
        state.active = index;
        return;
      }
      if (state.active > index) {
        state.direction = "prev";
        state.active = index;
      }
    };
    const handleScroll = () => {
      if (!document.hidden && isVisible$1(carouselRef.value)) {
        visible.value = true;
      } else {
        visible.value = false;
      }
    };
    onMounted(() => {
      window.addEventListener("scroll", handleScroll);
    });
    onUpdated(() => {
      watch(animating, () => {
        if (props.wrap) {
          !animating.value && cycle();
          return;
        }
        if (!props.wrap && state.active < state.items.length - 1) {
          !animating.value && cycle();
        }
      });
    });
    watch(visible, () => {
      visible.value && cycle();
    });
    return () => h("div", {
      class: [
        "carousel slide",
        props.transition === "crossfade" && "carousel-fade",
        props.dark && "carousel-dark"
      ],
      onmouseover: () => props.pause && pause(),
      onmouseleave: () => cycle(),
      ref: carouselRef
    }, [
      props.indicators && h("div", {
        class: "carousel-indicators"
      }, state.items.map((_2, index) => {
        return h("button", {
          type: "button",
          id: index,
          "data-coreui-target": "",
          ...state.active === index && { class: "active" },
          onClick: () => handleIndicatorClick(index)
        });
      })),
      h("div", { class: "carousel-inner" }, state.items.map((item, index) => {
        return h(item, {
          active: state.active === index ? true : false,
          direction: state.direction
        });
      })),
      props.controls && [
        h("button", {
          type: "button",
          class: "carousel-control-prev",
          "data-coreui-target": "",
          onClick: () => handleControlClick("prev")
        }, [
          h("span", { class: "carousel-control-prev-icon", ariaHidden: "true" }),
          h("span", { class: "visually-hidden" }, "Previous")
        ]),
        h("button", {
          type: "button",
          class: "carousel-control-next",
          "data-coreui-target": "",
          onClick: () => handleControlClick("next")
        }, [
          h("span", { class: "carousel-control-next-icon", ariaHidden: "true" }),
          h("span", { class: "visually-hidden" }, "Next")
        ])
      ]
    ]);
  }
});
var CCarouselCaption = defineComponent({
  name: "CCarouselCaption",
  setup(_2, { slots }) {
    return () => h("div", {
      class: "carousel-caption"
    }, slots.default && slots.default());
  }
});
var CCarouselItem = defineComponent({
  name: "CCarouselItem",
  props: {
    active: {
      type: Boolean,
      default: false
    },
    direction: {
      type: String,
      default: "next",
      required: false
    },
    interval: {
      type: [Boolean, Number],
      default: false,
      required: false
    }
  },
  setup(props, { slots }) {
    const carouselItemRef = ref();
    const { active } = toRefs(props);
    const directionClassName = ref();
    const orderClassName = ref();
    const activeClassName = ref(active.value && "active");
    const setAnimating = inject("setAnimating");
    const setCustomInterval = inject("setCustomInterval");
    watch(active, (active2, prevActive) => {
      active2 && setCustomInterval(props.interval);
      if (!prevActive && active2) {
        orderClassName.value = `carousel-item-${props.direction}`;
        setCustomInterval(props.interval);
      }
      setTimeout(() => {
        if (prevActive && !active2) {
          activeClassName.value = "active";
        }
        directionClassName.value = `carousel-item-${props.direction === "next" ? "start" : "end"}`;
      }, 0);
      carouselItemRef.value.addEventListener("transitionstart", () => {
        setAnimating(true);
      });
      carouselItemRef.value.addEventListener("transitionend", () => {
        setAnimating(false);
        if (active2) {
          directionClassName.value = "";
          orderClassName.value = "";
          activeClassName.value = "active";
        }
        if (!active2) {
          directionClassName.value = "";
          orderClassName.value = "";
          activeClassName.value = "";
        }
      });
    });
    return () => h("div", {
      class: [
        "carousel-item",
        activeClassName.value,
        directionClassName.value,
        orderClassName.value
      ],
      ref: carouselItemRef
    }, slots.default && slots.default());
  }
});
var CCarouselPlugin = {
  install: (app) => {
    app.component(CCarousel.name, CCarousel);
    app.component(CCarouselCaption.name, CCarouselCaption);
    app.component(CCarouselItem.name, CCarouselItem);
  }
};
var CCloseButtonPlugin = {
  install: (app) => {
    app.component(CCloseButton.name, CCloseButton);
  }
};
var CCollapsePlugin = {
  install: (app) => {
    app.component(CCollapse.name, CCollapse);
  }
};
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: y2 + height,
    left: x2,
    x: x2,
    y: y2
  };
}
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle$1(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle$1(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min2, value, max2) {
  var v2 = within(min2, value, max2);
  return v2 > max2 ? max2 : v2;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x2 = _ref.x, y2 = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x2 * dpr) / dpr || 0,
    y: round(y2 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x2,
    y: y2
  }) : {
    x: x2,
    y: y2
  };
  x2 = _ref3.x;
  y2 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y2 -= offsetY - popperRect.height;
      y2 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x2 -= offsetX - popperRect.width;
      x2 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x2,
    y: y2
  }) : {
    x: x2,
    y: y2
  };
  x2 = _ref4.x;
  y2 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x2 = 0;
  var y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2 + getWindowScrollBarX(element),
    y: y2
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y2 = -winScroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x2 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i2 = 0; i2 < placements2.length; i2++) {
    var placement = placements2[i2];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x2;
    state.modifiersData.popperOffsets.y += y2;
  }
  state.modifiersData[name] = data;
}
var offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min$1 = offset2 + overflow[mainSide];
    var max$1 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p2, c2) {
    return p2.replace(/%s/, c2);
  }, str);
}
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s2) {
            return '"' + s2 + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle$1(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = popperGenerator({
  defaultModifiers
});
var CDropdown = defineComponent({
  name: "CDropdown",
  props: {
    alignment: {
      type: [String, Object],
      default: void 0,
      required: false,
      validator: (value) => {
        if (value === "start" || value === "end") {
          return true;
        } else {
          if (typeof value.xs !== "undefined" && (value.xs === "start" || value.xs === "end")) {
            return true;
          }
          if (typeof value.sm !== "undefined" && (value.sm === "start" || value.sm === "end")) {
            return true;
          }
          if (typeof value.md !== "undefined" && (value.md === "start" || value.md === "end")) {
            return true;
          }
          if (typeof value.lg !== "undefined" && (value.lg === "start" || value.lg === "end")) {
            return true;
          }
          if (typeof value.xl !== "undefined" && (value.xl === "start" || value.xl === "end")) {
            return true;
          }
          if (typeof value.xxl !== "undefined" && (value.xxl === "start" || value.xxl === "end")) {
            return true;
          }
          return false;
        }
      }
    },
    autoClose: {
      type: [Boolean, String],
      default: true,
      validator: (value) => {
        return typeof value === "boolean" || ["inside", "outside"].includes(value);
      }
    },
    dark: {
      type: Boolean,
      required: false
    },
    direction: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["center", "dropup", "dropup-center", "dropend", "dropstart"].includes(value);
      }
    },
    disabled: {
      type: Boolean,
      required: false
    },
    placement: {
      type: String,
      default: "bottom-start",
      required: false
    },
    popper: {
      type: Boolean,
      default: true,
      required: false
    },
    trigger: {
      type: [String, Array],
      required: false,
      default: "click"
    },
    variant: {
      type: String,
      default: "btn-group",
      required: false,
      validator: (value) => {
        return ["btn-group", "dropdown", "input-group", "nav-item"].includes(value);
      }
    },
    visible: {
      type: Boolean,
      required: false
    }
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const dropdownToggleRef = ref();
    const dropdownMenuRef = ref();
    const placement = ref(props.placement);
    const popper2 = ref();
    const visible = ref(props.visible);
    watch(() => props.visible, () => {
      visible.value = props.visible;
    });
    provide("config", {
      autoClose: props.autoClose,
      alignment: props.alignment,
      dark: props.dark,
      popper: props.popper
    });
    provide("variant", props.variant);
    provide("visible", visible);
    provide("dropdownToggleRef", dropdownToggleRef);
    provide("dropdownMenuRef", dropdownMenuRef);
    if (props.direction === "center") {
      placement.value = "bottom";
    }
    if (props.direction === "dropup") {
      placement.value = "top-start";
    }
    if (props.direction === "dropup-center") {
      placement.value = "top";
    }
    if (props.direction === "dropend") {
      placement.value = "right-start";
    }
    if (props.direction === "dropstart") {
      placement.value = "left-start";
    }
    if (props.alignment === "end") {
      placement.value = "bottom-end";
    }
    const initPopper = () => {
      if (typeof props.alignment === "object") {
        return;
      }
      if (dropdownToggleRef.value) {
        popper2.value = createPopper(dropdownToggleRef.value, dropdownMenuRef.value, {
          placement: placement.value
        });
      }
    };
    const destroyPopper = () => {
      if (popper2.value) {
        popper2.value.destroy();
      }
      popper2.value = void 0;
    };
    const toggleMenu = (_visible) => {
      if (props.disabled) {
        return;
      }
      if (typeof _visible == "boolean") {
        visible.value = _visible;
        return;
      }
      if (visible.value === true) {
        visible.value = false;
        return;
      }
      visible.value = true;
    };
    provide("toggleMenu", toggleMenu);
    const hideMenu = () => {
      if (props.disabled) {
        return;
      }
      visible.value = false;
    };
    provide("hideMenu", hideMenu);
    watch(visible, () => {
      props.popper && (visible.value ? initPopper() : destroyPopper());
      visible.value ? emit("show") : emit("hide");
    });
    return () => props.variant === "input-group" ? [slots.default && slots.default()] : h("div", {
      class: [
        props.variant === "nav-item" ? "nav-item dropdown" : props.variant,
        props.direction === "center" ? "dropdown-center" : props.direction === "dropup-center" ? "dropup dropup-center" : props.direction
      ]
    }, slots.default && slots.default());
  }
});
var CDropdownItem = defineComponent({
  name: "CDropdownItem",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    component: {
      type: String,
      default: "a",
      required: false
    },
    disabled: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(CLink, {
      class: "dropdown-item",
      active: props.active,
      component: props.component,
      disabled: props.disabled,
      href: props.href
    }, {
      default: () => slots.default && slots.default()
    });
  }
});
var CDropdownHeader = defineComponent({
  name: "CDropdownHeader",
  props: {
    component: {
      type: String,
      default: "h6",
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: "dropdown-header"
    }, slots.default && slots.default());
  }
});
var CDropdownDivider = defineComponent({
  name: "CDropdownDivider",
  setup() {
    return () => h("hr", {
      class: "dropdown-divider"
    });
  }
});
var CDropdownMenu = defineComponent({
  name: "CDropdownMenu",
  props: {
    component: {
      type: String,
      default: "div",
      required: false
    }
  },
  setup(props, { slots }) {
    const dropdownToggleRef = inject("dropdownToggleRef");
    const dropdownMenuRef = inject("dropdownMenuRef");
    const config = inject("config");
    const hideMenu = inject("hideMenu");
    const visible = inject("visible");
    const { autoClose, alignment, dark, popper: popper2 } = config;
    const alignmentClassNames = (alignment2) => {
      const classNames = [];
      if (typeof alignment2 === "object") {
        Object.keys(alignment2).map((key) => {
          classNames.push(`dropdown-menu${key === "xs" ? "" : `-${key}`}-${alignment2[key]}`);
        });
      }
      if (typeof alignment2 === "string") {
        classNames.push(`dropdown-menu-${alignment2}`);
      }
      return classNames;
    };
    const handleKeyup = (event) => {
      if (autoClose === false) {
        return;
      }
      if (event.key === "Escape") {
        hideMenu();
      }
    };
    const handleMouseUp = (event) => {
      var _a, _b, _c;
      if ((_a = dropdownToggleRef.value) == null ? void 0 : _a.contains(event.target)) {
        return;
      }
      if (autoClose === true) {
        hideMenu();
        return;
      }
      if (autoClose === "inside" && ((_b = dropdownMenuRef.value) == null ? void 0 : _b.contains(event.target))) {
        hideMenu();
        return;
      }
      if (autoClose === "outside" && !((_c = dropdownMenuRef.value) == null ? void 0 : _c.contains(event.target))) {
        hideMenu();
      }
    };
    onUpdated(() => {
      visible.value && window.addEventListener("mouseup", handleMouseUp);
      visible.value && window.addEventListener("keyup", handleKeyup);
    });
    onUnmounted(() => {
      window.removeEventListener("mouseup", handleMouseUp);
      window.removeEventListener("keyup", handleKeyup);
    });
    return () => h(props.component, {
      class: [
        "dropdown-menu",
        { "dropdown-menu-dark": dark, show: visible.value },
        alignmentClassNames(alignment)
      ],
      ...(typeof alignment === "object" || !popper2) && {
        "data-coreui-popper": "static"
      },
      ref: dropdownMenuRef
    }, props.component === "ul" ? slots.default && slots.default().map((vnode) => h("li", {}, vnode)) : slots.default && slots.default());
  }
});
var CDropdownToggle = defineComponent({
  name: "CDropdownToggle",
  props: {
    active: {
      type: Boolean,
      default: false,
      required: false
    },
    color: Color,
    caret: {
      type: Boolean,
      default: true,
      required: false
    },
    component: {
      type: String,
      default: "button",
      require: false
    },
    custom: Boolean,
    disabled: {
      type: Boolean,
      required: false
    },
    shape: Shape,
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    },
    split: {
      type: Boolean,
      required: false
    },
    trigger: {
      type: String,
      default: "click",
      required: false
    },
    variant: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["ghost", "outline"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    const togglerRef = ref();
    const dropdownToggleRef = inject("dropdownToggleRef");
    const dropdownVariant = inject("variant");
    const visible = inject("visible");
    const toggleMenu = inject("toggleMenu");
    const className = [
      {
        "dropdown-toggle": props.caret,
        "dropdown-toggle-split": props.split,
        active: props.active,
        disabled: props.disabled
      }
    ];
    const triggers = {
      ...(props.trigger === "click" || props.trigger.includes("click")) && {
        onClick: () => {
          if (props.disabled) {
            return;
          }
          toggleMenu();
        }
      },
      ...(props.trigger === "focus" || props.trigger.includes("focus")) && {
        onfocus: () => {
          if (props.disabled) {
            return;
          }
          toggleMenu(true);
        },
        onblur: () => {
          if (props.disabled) {
            return;
          }
          toggleMenu(false);
        }
      }
    };
    onMounted(() => {
      if (togglerRef.value) {
        dropdownToggleRef.value = togglerRef.value.$el;
      }
    });
    return () => props.custom ? slots.default && slots.default().map((slot) => cloneVNode(slot, {
      ref: (el) => {
        togglerRef.value = el;
      },
      ...triggers
    })) : dropdownVariant === "nav-item" ? h("a", {
      active: props.active,
      class: [
        "nav-link",
        className,
        {
          show: visible.value
        }
      ],
      disabled: props.disabled,
      href: "#",
      ref: dropdownToggleRef,
      ...triggers
    }, { default: () => slots.default && slots.default() }) : h(CButton, {
      class: [
        className,
        {
          show: visible.value
        }
      ],
      active: props.active,
      color: props.color,
      disabled: props.disabled,
      ref: (el) => {
        togglerRef.value = el;
      },
      shape: props.shape,
      size: props.size,
      ...triggers,
      ...props.component === "button" && { type: "button" },
      variant: props.variant
    }, () => props.split ? h("span", { class: "visually-hidden" }, "Toggle Dropdown") : slots.default && slots.default());
  }
});
var CDropdownPlugin = {
  install: (app) => {
    app.component(CDropdown.name, CDropdown);
    app.component(CDropdownItem.name, CDropdownItem);
    app.component(CDropdownHeader.name, CDropdownHeader);
    app.component(CDropdownDivider.name, CDropdownDivider);
    app.component(CDropdownMenu.name, CDropdownMenu);
    app.component(CDropdownToggle.name, CDropdownToggle);
  }
};
var CFooter = defineComponent({
  name: "CFooter",
  props: {
    position: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["fixed", "sticky"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h("div", { class: ["footer", { [`footer-${props.position}`]: props.position }] }, slots.default && slots.default());
  }
});
var CFooterPlugin = {
  install: (app) => {
    app.component(CFooter.name, CFooter);
  }
};
var CForm = defineComponent({
  name: "CForm",
  props: {
    validated: {
      type: Boolean,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h("form", { class: [{ ["was-validated"]: props.validated }] }, slots.default && slots.default());
  }
});
var CFormFeedback = defineComponent({
  name: "CFormFeedback",
  props: {
    component: {
      type: String,
      required: false,
      default: "div"
    },
    invalid: Boolean,
    tooltip: Boolean,
    valid: Boolean
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        {
          [`invalid-${props.tooltip ? "tooltip" : "feedback"}`]: props.invalid,
          [`valid-${props.tooltip ? "tooltip" : "feedback"}`]: props.valid
        }
      ]
    }, slots.default && slots.default());
  }
});
var CFormControlValidation = defineComponent({
  name: "CFormControlValidation",
  inheritAttrs: false,
  props: {
    describedby: {
      type: String
    },
    feedback: {
      type: String
    },
    feedbackInvalid: {
      type: String
    },
    feedbackValid: {
      type: String
    },
    invalid: Boolean,
    tooltipFeedback: Boolean,
    valid: Boolean
  },
  setup(props, { slots }) {
    return () => [
      props.feedback && (props.valid || props.invalid) && h(CFormFeedback, {
        ...props.invalid && { id: props.describedby },
        invalid: props.invalid,
        tooltip: props.tooltipFeedback,
        valid: props.valid
      }, {
        default: () => slots.feedback && slots.feedback() || props.feedback
      }),
      (props.feedbackInvalid || slots.feedbackInvalid) && h(CFormFeedback, {
        id: props.describedby,
        invalid: true,
        tooltip: props.tooltipFeedback
      }, {
        default: () => slots.feedbackInvalid && slots.feedbackInvalid() || props.feedbackInvalid
      }),
      (props.feedbackValid || slots.feedbackValid) && h(CFormFeedback, {
        tooltip: props.tooltipFeedback,
        valid: true
      }, {
        default: () => slots.feedbackValid && slots.feedbackValid() || props.feedbackValid
      })
    ];
  }
});
var CFormLabel = defineComponent({
  name: "CFormLabel",
  props: {
    customClassName: {
      type: [Array, String],
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h("label", {
      class: props.customClassName ? props.customClassName : "form-label"
    }, slots.default && slots.default());
  }
});
var CFormCheck = defineComponent({
  name: "CFormCheck",
  inheritAttrs: false,
  props: {
    button: {
      type: Object
    },
    feedback: {
      type: String
    },
    feedbackInvalid: {
      type: String
    },
    feedbackValid: {
      type: String
    },
    hitArea: {
      type: String,
      validator: (value) => {
        return ["full"].includes(value);
      }
    },
    id: {
      type: String
    },
    indeterminate: Boolean,
    inline: {
      type: Boolean
    },
    invalid: Boolean,
    label: {
      type: String
    },
    modelValue: {
      type: [Boolean, String],
      value: void 0
    },
    tooltipFeedback: Boolean,
    type: {
      type: String,
      default: "checkbox"
    },
    valid: {
      type: Boolean
    }
  },
  emits: [
    "change",
    "update:modelValue"
  ],
  setup(props, { attrs, emit, slots }) {
    const handleChange = (event) => {
      const target = event.target;
      emit("change", event);
      emit("update:modelValue", target.checked);
    };
    const className = [
      "form-check",
      {
        "form-check-inline": props.inline,
        "is-invalid": props.invalid,
        "is-valid": props.valid
      },
      attrs.class
    ];
    const inputClassName = [
      props.button ? "btn-check" : "form-check-input",
      {
        "is-invalid": props.invalid,
        "is-valid": props.valid,
        "me-2": props.hitArea
      }
    ];
    const formControl = () => {
      return h("input", {
        ...attrs,
        ...props.modelValue && { checked: props.modelValue },
        class: inputClassName,
        id: props.id,
        indeterminate: props.indeterminate,
        onChange: (event) => handleChange(event),
        type: props.type
      });
    };
    const formLabel = () => props.button ? h(CButton, {
      component: "label",
      ...props.button,
      ...props.id && { for: props.id }
    }, {
      default: () => slots.label && slots.label() || props.label
    }) : h(CFormLabel, { class: "form-check-label", ...props.id && { for: props.id } }, {
      default: () => slots.label && slots.label() || props.label
    });
    const formValidation = () => {
      return h(CFormControlValidation, {
        describedby: attrs["aria-describedby"],
        feedback: props.feedback,
        feedbackInvalid: props.feedbackInvalid,
        feedbackValid: props.feedbackValid,
        invalid: props.invalid,
        tooltipFeedback: props.tooltipFeedback,
        valid: props.valid
      });
    };
    return () => props.button ? [formControl(), (slots.label || props.label) && formLabel(), formValidation()] : props.label ? props.hitArea ? [
      h(CFormLabel, {
        customClassName: className,
        ...props.id && { for: props.id }
      }, [formControl(), props.label]),
      formValidation()
    ] : h("div", {
      class: className
    }, [formControl(), props.label && formLabel(), formValidation()]) : formControl();
  }
});
var CFormFloating = defineComponent({
  name: "CFormFloating",
  setup(_2, { slots }) {
    return () => h("div", {
      class: "form-floating"
    }, slots.default && slots.default());
  }
});
var CFormText = defineComponent({
  name: "CFormText",
  props: {
    component: {
      type: String,
      required: false,
      default: "div"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "form-text" }, slots.default && slots.default());
  }
});
var CFormControlWrapper = defineComponent({
  name: "CFormControlWrapper",
  inheritAttrs: false,
  props: {
    ...CFormControlValidation.props,
    floatingLabel: {
      type: String
    },
    id: {
      type: String
    },
    label: {
      type: String
    },
    text: {
      type: String
    }
  },
  setup(props, { slots }) {
    return () => props.floatingLabel ? h(CFormFloating, () => [
      slots.default && slots.default(),
      h(CFormLabel, {
        for: props.id
      }, {
        default: () => slots.label && slots.label() || props.label || props.floatingLabel
      })
    ]) : [
      (props.label || slots.label) && h(CFormLabel, {
        for: props.id
      }, {
        default: () => slots.label && slots.label() || props.label
      }),
      slots.default && slots.default(),
      (props.text || slots.text) && h(CFormText, {
        id: props.describedby
      }, {
        default: () => slots.text && slots.text() || props.text
      }),
      h(CFormControlValidation, {
        describedby: props.describedby,
        feedback: props.feedback,
        feedbackInvalid: props.feedbackInvalid,
        feedbackValid: props.feedbackValid,
        floatingLabel: props.floatingLabel,
        invalid: props.invalid,
        tooltipFeedback: props.tooltipFeedback,
        valid: props.valid
      }, {
        ...slots.feedback && { feedback: () => slots.feedback && slots.feedback() },
        ...slots.feedbackInvalid && {
          feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid()
        },
        ...slots.feedbackValid && {
          feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid()
        }
      })
    ];
  }
});
var CFormInput = defineComponent({
  name: "CFormInput",
  props: {
    disabled: {
      type: Boolean,
      required: false
    },
    feedback: {
      type: String
    },
    feedbackInvalid: {
      type: String
    },
    feedbackValid: {
      type: String
    },
    floatingLabel: {
      type: String
    },
    id: {
      type: String
    },
    invalid: Boolean,
    label: {
      type: String
    },
    modelValue: {
      type: [File, Number, String],
      default: void 0
    },
    plainText: {
      type: Boolean,
      required: false
    },
    readonly: {
      type: Boolean,
      required: false
    },
    size: {
      type: String,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    },
    text: {
      type: String
    },
    tooltipFeedback: Boolean,
    type: {
      type: String,
      default: "text"
    },
    valid: Boolean
  },
  emits: [
    "change",
    "input",
    "update:modelValue"
  ],
  setup(props, { attrs, emit, slots }) {
    const handleChange = (event) => {
      const target = event.target;
      emit("change", event);
      emit("update:modelValue", target.value);
    };
    const handleInput = (event) => {
      const target = event.target;
      emit("input", event);
      emit("update:modelValue", target.value);
    };
    return () => h(CFormControlWrapper, {
      describedby: attrs["aria-describedby"],
      feedback: props.feedback,
      feedbackInvalid: props.feedbackInvalid,
      feedbackValid: props.feedbackValid,
      floatingLabel: props.floatingLabel,
      id: props.id,
      invalid: props.invalid,
      label: props.label,
      text: props.text,
      tooltipFeedback: props.tooltipFeedback,
      valid: props.valid
    }, {
      default: () => h("input", {
        id: props.id,
        ...attrs,
        class: [
          props.plainText ? "form-control-plaintext" : "form-control",
          {
            "form-control-color": props.type === "color",
            [`form-control-${props.size}`]: props.size,
            "is-invalid": props.invalid,
            "is-valid": props.valid
          },
          attrs.class
        ],
        disabled: props.disabled,
        onChange: (event) => handleChange(event),
        onInput: (event) => handleInput(event),
        readonly: props.readonly,
        type: props.type,
        ...(props.modelValue || props.modelValue === 0) && { value: props.modelValue }
      }, slots.default && slots.default()),
      ...slots.feedback && { feedback: () => slots.feedback && slots.feedback() },
      ...slots.feedbackInvalid && {
        feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.feedbackValid && {
        feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.label && { label: () => slots.label && slots.label() },
      ...slots.text && { text: () => slots.text && slots.text() }
    });
  }
});
var CFormRange = defineComponent({
  name: "CFormRange",
  props: {
    disabled: {
      type: Boolean,
      default: void 0
    },
    label: {
      type: String
    },
    max: {
      type: Number,
      default: void 0
    },
    min: {
      type: Number,
      default: void 0
    },
    modelValue: {
      type: String,
      value: void 0
    },
    readonly: {
      type: Boolean
    },
    steps: {
      type: Number,
      default: void 0
    },
    value: {
      type: Number,
      default: void 0
    }
  },
  emits: [
    "change",
    "update:modelValue"
  ],
  setup(props, { attrs, emit, slots }) {
    const handleChange = (event) => {
      const target = event.target;
      emit("change", event);
      emit("update:modelValue", target.value);
    };
    return () => [
      props.label && h(CFormLabel, {
        for: attrs.id
      }, {
        default: () => slots.label && slots.label() || props.label
      }),
      h("input", {
        ...attrs,
        class: "form-range",
        disabled: props.disabled,
        max: props.max,
        min: props.min,
        onChange: (event) => handleChange(event),
        readonly: props.readonly,
        steps: props.steps,
        type: "range",
        value: props.modelValue
      }, slots.default && slots.default())
    ];
  }
});
var CFormSelect = defineComponent({
  name: "CFormSelect",
  props: {
    feedback: {
      type: String
    },
    feedbackInvalid: {
      type: String
    },
    feedbackValid: {
      type: String
    },
    floatingLabel: {
      type: String
    },
    htmlSize: {
      type: Number,
      default: void 0,
      required: false
    },
    id: {
      type: String
    },
    invalid: Boolean,
    label: {
      type: String
    },
    modelValue: {
      type: [String, Array],
      default: void 0,
      require: false
    },
    multiple: {
      type: Boolean,
      required: false
    },
    options: {
      type: Array,
      default: void 0,
      required: false
    },
    size: {
      type: String,
      default: void 0,
      require: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    },
    text: {
      type: String
    },
    tooltipFeedback: Boolean,
    valid: Boolean
  },
  emits: [
    "change",
    "update:modelValue"
  ],
  setup(props, { attrs, emit, slots }) {
    const handleChange = (event) => {
      const target = event.target;
      const selected = Array.from(target.options).filter((option) => option.selected).map((option) => option.value);
      emit("change", event);
      emit("update:modelValue", target.multiple ? selected : selected[0]);
    };
    return () => h(CFormControlWrapper, {
      describedby: attrs["aria-describedby"],
      feedback: props.feedback,
      feedbackInvalid: props.feedbackInvalid,
      feedbackValid: props.feedbackValid,
      floatingLabel: props.floatingLabel,
      id: props.id,
      invalid: props.invalid,
      label: props.label,
      text: props.text,
      tooltipFeedback: props.tooltipFeedback,
      valid: props.valid
    }, {
      default: () => h("select", {
        id: props.id,
        ...attrs,
        class: [
          "form-select",
          {
            [`form-select-${props.size}`]: props.size,
            "is-invalid": props.invalid,
            "is-valid": props.valid
          },
          attrs.class
        ],
        multiple: props.multiple,
        onChange: (event) => handleChange(event),
        size: props.htmlSize,
        ...props.modelValue && !props.multiple && { value: props.modelValue }
      }, props.options ? props.options.map((option) => {
        return h("option", {
          ...typeof option === "object" && {
            ...option.disabled && { disabled: option.disabled },
            ...option.selected && { selected: option.selected },
            ...option.value && {
              value: option.value,
              ...props.modelValue && props.multiple && props.modelValue.includes(option.value) && { selected: true }
            }
          }
        }, typeof option === "string" ? option : option.label);
      }) : slots.default && slots.default()),
      ...slots.feedback && { feedback: () => slots.feedback && slots.feedback() },
      ...slots.feedbackInvalid && {
        feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.feedbackValid && {
        feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.label && { label: () => slots.label && slots.label() },
      ...slots.text && { text: () => slots.text && slots.text() }
    });
  }
});
var CFormSwitch = defineComponent({
  name: "CFormSwitch",
  inheritAttrs: false,
  props: {
    id: {
      type: String
    },
    invalid: {
      type: Boolean
    },
    label: {
      type: String
    },
    modelValue: {
      type: [Boolean, String],
      value: void 0
    },
    size: {
      type: String,
      validator: (value) => {
        return ["lg", "xl"].includes(value);
      }
    },
    type: {
      type: String,
      default: "checkbox"
    },
    valid: {
      type: Boolean
    }
  },
  emits: [
    "change",
    "update:modelValue"
  ],
  setup(props, { attrs, emit }) {
    const handleChange = (event) => {
      const target = event.target;
      emit("change", event);
      emit("update:modelValue", target.checked);
    };
    return () => h("div", {
      class: [
        "form-check form-switch",
        {
          [`form-switch-${props.size}`]: props.size,
          "is-invalid": props.invalid,
          "is-valid": props.valid
        }
      ]
    }, [
      h("input", {
        ...attrs,
        ...props.modelValue && { checked: props.modelValue },
        class: [
          "form-check-input",
          {
            "is-invalid": props.invalid,
            "is-valid": props.valid
          }
        ],
        id: props.id,
        onChange: (event) => handleChange(event),
        type: props.type
      }),
      props.label && h(CFormLabel, {
        ...props.id && { for: props.id },
        class: "form-check-label"
      }, {
        default: () => props.label
      })
    ]);
  }
});
var CFormTextarea = defineComponent({
  name: "CFormTextarea",
  props: {
    disabled: {
      type: Boolean
    },
    feedback: {
      type: String
    },
    feedbackInvalid: {
      type: String
    },
    feedbackValid: {
      type: String
    },
    floatingLabel: {
      type: String
    },
    id: {
      type: String
    },
    invalid: Boolean,
    label: {
      type: String
    },
    modelValue: {
      type: String,
      default: void 0
    },
    plainText: {
      type: Boolean
    },
    readonly: {
      type: Boolean
    },
    text: {
      type: String
    },
    tooltipFeedback: Boolean,
    valid: Boolean
  },
  emits: [
    "change",
    "input",
    "update:modelValue"
  ],
  setup(props, { attrs, emit, slots }) {
    const handleChange = (event) => {
      const target = event.target;
      emit("change", event);
      emit("update:modelValue", target.value);
    };
    const handleInput = (event) => {
      const target = event.target;
      emit("input", event);
      emit("update:modelValue", target.value);
    };
    return () => h(CFormControlWrapper, {
      describedby: attrs["aria-describedby"],
      feedback: props.feedback,
      feedbackInvalid: props.feedbackInvalid,
      feedbackValid: props.feedbackValid,
      floatingLabel: props.floatingLabel,
      id: props.id,
      invalid: props.invalid,
      label: props.label,
      text: props.text,
      tooltipFeedback: props.tooltipFeedback,
      valid: props.valid
    }, {
      default: () => h("textarea", {
        id: props.id,
        ...attrs,
        disabled: props.disabled,
        readonly: props.readonly,
        class: [
          props.plainText ? "form-control-plaintext" : "form-control",
          {
            "is-invalid": props.invalid,
            "is-valid": props.valid
          }
        ],
        onChange: (event) => handleChange(event),
        onInput: (event) => handleInput(event),
        ...props.modelValue && { value: props.modelValue }
      }, slots.default && slots.default()),
      ...slots.feedback && { feedback: () => slots.feedback && slots.feedback() },
      ...slots.feedbackInvalid && {
        feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.feedbackValid && {
        feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid()
      },
      ...slots.label && { label: () => slots.label && slots.label() },
      ...slots.text && { text: () => slots.text && slots.text() }
    });
  }
});
var CInputGroup = defineComponent({
  name: "CInputGroup",
  props: {
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "input-group",
        {
          [`input-group-${props.size}`]: props.size
        }
      ]
    }, slots.default && slots.default());
  }
});
var CInputGroupText = defineComponent({
  name: "CInputGroupText",
  props: {
    component: {
      type: String,
      required: false,
      default: "span"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "input-group-text" }, slots.default && slots.default());
  }
});
var CFormPlugin = {
  install: (app) => {
    app.component(CForm.name, CForm);
    app.component(CFormCheck.name, CFormCheck);
    app.component(CFormFeedback.name, CFormFeedback);
    app.component(CFormFloating.name, CFormFloating);
    app.component(CFormInput.name, CFormInput);
    app.component(CFormLabel.name, CFormLabel);
    app.component(CFormRange.name, CFormRange);
    app.component(CFormSelect.name, CFormSelect);
    app.component(CFormSwitch.name, CFormSwitch);
    app.component(CFormText.name, CFormText);
    app.component(CFormTextarea.name, CFormTextarea);
    app.component(CInputGroup.name, CInputGroup);
    app.component(CInputGroupText.name, CInputGroupText);
  }
};
var BREAKPOINTS$4 = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];
var CCol = defineComponent({
  name: "CCol",
  props: {
    xs: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    },
    sm: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    },
    md: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    },
    lg: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    },
    xl: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    },
    xxl: {
      type: [Boolean, Number, String, Object],
      default: void 0,
      require: false
    }
  },
  setup(props, { slots }) {
    const repsonsiveClassNames = [];
    BREAKPOINTS$4.forEach((bp) => {
      const breakpoint = props[bp];
      const infix = bp === "xs" ? "" : `-${bp}`;
      if (breakpoint) {
        if (typeof breakpoint === "number" || typeof breakpoint === "string") {
          repsonsiveClassNames.push(`col${infix}-${breakpoint}`);
        }
        if (typeof breakpoint === "boolean") {
          repsonsiveClassNames.push(`col${infix}`);
        }
      }
      if (breakpoint && typeof breakpoint === "object") {
        if (typeof breakpoint.span === "number" || typeof breakpoint.span === "string") {
          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`);
        }
        if (typeof breakpoint.span === "boolean") {
          repsonsiveClassNames.push(`col${infix}`);
        }
        if (typeof breakpoint.order === "number" || typeof breakpoint.order === "string") {
          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`);
        }
        if (typeof breakpoint.offset === "number") {
          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`);
        }
      }
    });
    return () => h("div", {
      class: [repsonsiveClassNames.length ? repsonsiveClassNames : "col"]
    }, slots.default && slots.default());
  }
});
var BREAKPOINTS$3 = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "fluid"
];
var CContainer = defineComponent({
  name: "CContainer",
  props: {
    sm: {
      type: Boolean,
      required: false
    },
    md: {
      type: Boolean,
      required: false
    },
    lg: {
      type: Boolean,
      required: false
    },
    xl: {
      type: Boolean,
      required: false
    },
    xxl: {
      type: Boolean,
      required: false
    },
    fluid: {
      type: Boolean,
      required: false
    }
  },
  setup(props, { slots }) {
    const repsonsiveClassNames = [];
    BREAKPOINTS$3.forEach((bp) => {
      const breakpoint = props[bp];
      breakpoint && repsonsiveClassNames.push(`container-${bp}`);
    });
    return () => h("div", {
      class: [repsonsiveClassNames.length ? repsonsiveClassNames : "container"]
    }, slots.default && slots.default());
  }
});
var BREAKPOINTS$2 = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];
var CRow = defineComponent({
  name: "CRow",
  props: {
    xs: {
      type: Object,
      default: void 0,
      required: false
    },
    sm: {
      type: Object,
      default: void 0,
      required: false
    },
    md: {
      type: Object,
      default: void 0,
      required: false
    },
    lg: {
      type: Object,
      default: void 0,
      required: false
    },
    xl: {
      type: Object,
      default: void 0,
      required: false
    },
    xxl: {
      type: Object,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    const repsonsiveClassNames = [];
    BREAKPOINTS$2.forEach((bp) => {
      const breakpoint = props[bp];
      const infix = bp === "xs" ? "" : `-${bp}`;
      if (typeof breakpoint === "object") {
        if (breakpoint.cols) {
          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`);
        }
        if (typeof breakpoint.gutter === "number") {
          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`);
        }
        if (typeof breakpoint.gutterX === "number") {
          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`);
        }
        if (typeof breakpoint.gutterY === "number") {
          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`);
        }
      }
    });
    return () => h("div", {
      class: ["row", repsonsiveClassNames]
    }, slots.default && slots.default());
  }
});
var CGridPlugin = {
  install: (app) => {
    app.component(CCol.name, CCol);
    app.component(CContainer.name, CContainer);
    app.component(CRow.name, CRow);
  }
};
var CHeader = defineComponent({
  name: "CHeader",
  props: {
    container: {
      type: [Boolean, String],
      default: void 0,
      required: false,
      validator: (value) => {
        return typeof value === "boolean" || ["sm", "md", "lg", "xl", "xxl", "fluid"].includes(value);
      }
    },
    position: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["fixed", "sticky"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h("div", { class: ["header", { [`header-${props.position}`]: props.position }] }, props.container ? h("div", { class: `container${props.container !== true ? "-" + props.container : ""}` }, slots.default && slots.default()) : slots.default && slots.default());
  }
});
var CHeaderBrand = defineComponent({
  name: "CHeaderBrand",
  props: {
    component: {
      type: String,
      required: false,
      default: "a"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "header-brand" }, slots.default && slots.default());
  }
});
var CHeaderDivider = defineComponent({
  name: "CHeaderDivider",
  setup(_2, { slots }) {
    return () => h("div", { class: "header-divider" }, slots.default && slots.default());
  }
});
var CHeaderNav = defineComponent({
  name: "CHeaderNav",
  props: {
    component: {
      type: String,
      required: false,
      default: "ul"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: "header-nav",
      role: "navigation"
    }, slots.default && slots.default());
  }
});
var CHeaderText = defineComponent({
  name: "CHeaderText",
  setup(_2, { slots }) {
    return () => h("span", { class: "header-text" }, slots.default && slots.default());
  }
});
var CHeaderToggler = defineComponent({
  name: "CHeaderToggler",
  setup(_2, { slots }) {
    return () => h("button", {
      class: "header-toggler",
      type: "button",
      "aria-label": "Toggle navigation"
    }, slots.default ? slots.default() : h("span", { class: ["header-toggler-icon"] }));
  }
});
var CHeaderPlugin = {
  install: (app) => {
    app.component(CHeader.name, CHeader);
    app.component(CHeaderBrand.name, CHeaderBrand);
    app.component(CHeaderDivider.name, CHeaderDivider);
    app.component(CHeaderNav.name, CHeaderNav);
    app.component(CHeaderText.name, CHeaderText);
    app.component(CHeaderToggler.name, CHeaderToggler);
  }
};
var CImage = defineComponent({
  name: "CImage",
  props: {
    align: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["start", "center", "end"].includes(value);
      }
    },
    fluid: {
      type: Boolean,
      required: false
    },
    rounded: {
      type: Boolean,
      required: false
    },
    thumbnail: {
      type: Boolean,
      required: false
    }
  },
  setup(props) {
    return () => h("img", {
      class: [
        {
          [`float-${props.align}`]: props.align && (props.align === "start" || props.align === "end"),
          "d-block mx-auto": props.align && props.align === "center",
          "img-fluid": props.fluid,
          rounded: props.rounded,
          "img-thumbnail": props.thumbnail
        }
      ]
    });
  }
});
var CImagePlugin = {
  install: (app) => {
    app.component(CImage.name, CImage);
  }
};
var CListGroup = defineComponent({
  name: "CListGroup",
  props: {
    component: {
      type: String,
      required: false,
      default: "ul"
    },
    flush: {
      type: Boolean,
      required: false
    },
    layout: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return [
          "horizontal",
          "horizontal-sm",
          "horizontal-md",
          "horizontal-lg",
          "horizontal-xl",
          "horizontal-xxl"
        ].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        "list-group",
        {
          "list-group-flush": props.flush,
          [`list-group-${props.layout}`]: props.layout
        }
      ]
    }, slots.default && slots.default());
  }
});
var CListGroupItem = defineComponent({
  name: "CListGroupItem",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    color: Color,
    disabled: {
      type: Boolean,
      required: false
    },
    component: {
      type: String,
      required: false,
      default: "li"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        "list-group-item",
        {
          [`list-group-item-${props.color}`]: props.color,
          "list-group-item-action": props.component === "a" || props.component === "button",
          [`active`]: props.active,
          [`disabled`]: props.disabled
        }
      ],
      ...(props.component === "a" || props.component === "button") && {
        active: props.active,
        disabled: props.disabled
      },
      ...props.active && { "aria-current": true },
      ...props.disabled && { "aria-disabled": true }
    }, slots.default && slots.default());
  }
});
var CListGroupPlugin = {
  install: (app) => {
    app.component(CListGroup.name, CListGroup);
    app.component(CListGroupItem.name, CListGroupItem);
  }
};
var CModal = defineComponent({
  name: "CModal",
  inheritAttrs: false,
  props: {
    alignment: {
      default: "top",
      required: false,
      validator: (value) => {
        return ["top", "center"].includes(value);
      }
    },
    backdrop: {
      type: [Boolean, String],
      default: true,
      require: false
    },
    contentClassName: {
      type: String,
      default: void 0,
      required: false
    },
    fullscreen: {
      type: [Boolean, String],
      default: void 0,
      required: false,
      validator: (value) => {
        if (typeof value == "string") {
          return ["sm", "md", "lg", "xl", "xxl"].includes(value);
        }
        if (typeof value == "boolean") {
          return true;
        }
        return false;
      }
    },
    keyboard: {
      type: Boolean,
      default: true,
      required: false
    },
    scrollable: {
      type: Boolean,
      required: false
    },
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg", "xl"].includes(value);
      }
    },
    transition: {
      type: Boolean,
      default: true,
      required: false
    },
    unmountOnClose: {
      type: Boolean,
      default: true,
      required: false
    },
    visible: Boolean
  },
  emits: [
    "close",
    "close-prevented",
    "show"
  ],
  setup(props, { slots, attrs, emit }) {
    const modalRef = ref();
    const modalContentRef = ref();
    const visible = ref(props.visible);
    watch(() => props.visible, () => {
      visible.value = props.visible;
    });
    const handleEnter = (el, done) => {
      executeAfterTransition(() => done(), el);
      document.body.classList.add("modal-open");
      document.body.style.overflow = "hidden";
      document.body.style.paddingRight = "0px";
      el.style.display = "block";
      setTimeout(() => {
        el.classList.add("show");
      }, 1);
      emit("show");
    };
    const handleAfterEnter = () => {
      window.addEventListener("mousedown", handleMouseDown);
      window.addEventListener("keyup", handleKeyUp);
    };
    const handleLeave = (el, done) => {
      executeAfterTransition(() => done(), el);
      document.body.classList.remove("modal-open");
      document.body.style.removeProperty("overflow");
      document.body.style.removeProperty("padding-right");
      if (document.body.className === "") {
        document.body.removeAttribute("class");
      }
      el.classList.remove("show");
    };
    const handleAfterLeave = (el) => {
      window.removeEventListener("mousedown", handleMouseDown);
      window.removeEventListener("keyup", handleKeyUp);
      el.style.display = "none";
    };
    const handleDismiss = () => {
      emit("close");
      visible.value = false;
    };
    const handleKeyUp = (event) => {
      if (modalContentRef.value && !modalContentRef.value.contains(event.target)) {
        if (props.backdrop !== "static" && event.key === "Escape" && props.keyboard) {
          handleDismiss();
        }
        if (props.backdrop === "static") {
          modalRef.value.classList.add("modal-static");
          emit("close-prevented");
          setTimeout(() => {
            modalRef.value.classList.remove("modal-static");
          }, 300);
        }
      }
    };
    const handleMouseDown = (event) => {
      window.addEventListener("mouseup", () => handleMouseUp(event), { once: true });
    };
    const handleMouseUp = (event) => {
      if (modalContentRef.value && !modalContentRef.value.contains(event.target)) {
        if (props.backdrop !== "static") {
          handleDismiss();
        }
        if (props.backdrop === "static") {
          modalRef.value.classList.add("modal-static");
          setTimeout(() => {
            modalRef.value.classList.remove("modal-static");
          }, 300);
        }
      }
    };
    provide("handleDismiss", handleDismiss);
    const modal = () => h("div", {
      class: [
        "modal",
        {
          ["fade"]: props.transition
        },
        attrs.class
      ],
      ref: modalRef
    }, h("div", {
      class: [
        "modal-dialog",
        {
          "modal-dialog-centered": props.alignment === "center",
          [`modal-fullscreen-${props.fullscreen}-down`]: props.fullscreen && typeof props.fullscreen === "string",
          "modal-fullscreen": props.fullscreen && typeof props.fullscreen === "boolean",
          ["modal-dialog-scrollable"]: props.scrollable,
          [`modal-${props.size}`]: props.size
        }
      ],
      role: "dialog"
    }, h("div", { class: ["modal-content", props.contentClassName], ref: modalContentRef }, slots.default && slots.default())));
    return () => [
      h(Transition, {
        css: false,
        onEnter: (el, done) => handleEnter(el, done),
        onAfterEnter: () => handleAfterEnter(),
        onLeave: (el, done) => handleLeave(el, done),
        onAfterLeave: (el) => handleAfterLeave(el)
      }, () => props.unmountOnClose ? visible.value && modal() : withDirectives(modal(), [[vShow, visible.value]])),
      props.backdrop && h(CBackdrop, {
        class: "modal-backdrop",
        visible: visible.value
      })
    ];
  }
});
var CModalBody = defineComponent({
  name: "CModalBody",
  setup(_2, { slots }) {
    return () => h("div", { class: "modal-body" }, slots.default && slots.default());
  }
});
var CModalFooter = defineComponent({
  name: "CModalFooter",
  setup(_2, { slots }) {
    return () => h("div", { class: "modal-footer" }, slots.default && slots.default());
  }
});
var CModalHeader = defineComponent({
  name: "CModalHeader",
  props: {
    closeButton: {
      type: Boolean,
      required: false,
      default: true
    }
  },
  setup(props, { slots }) {
    const handleDismiss = inject("handleDismiss");
    return () => h("span", { class: "modal-header" }, [
      slots.default && slots.default(),
      props.closeButton && h(CCloseButton, { onClick: () => handleDismiss() }, "")
    ]);
  }
});
var CModalTitle = defineComponent({
  name: "CModalTitle",
  props: {
    component: {
      type: String,
      default: "h5",
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "modal-title" }, slots.default && slots.default());
  }
});
var CModalPlugin = {
  install: (app) => {
    app.component(CModal.name, CModal);
    app.component(CModalBody.name, CModalBody);
    app.component(CModalFooter.name, CModalFooter);
    app.component(CModalHeader.name, CModalHeader);
    app.component(CModalTitle.name, CModalTitle);
  }
};
var CNav = defineComponent({
  name: "CNav",
  props: {
    component: {
      type: String,
      required: false,
      default: "ul"
    },
    layout: {
      type: String,
      required: false,
      default: void 0,
      validator: (value) => {
        return ["fill", "justified"].includes(value);
      }
    },
    variant: {
      type: String,
      required: false,
      default: void 0,
      validator: (value) => {
        return ["tabs", "pills"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        "nav",
        {
          [`nav-${props.layout}`]: props.layout,
          [`nav-${props.variant}`]: props.variant
        }
      ],
      role: "navigation"
    }, slots.default && slots.default());
  }
});
var CNavGroup = defineComponent({
  name: "CNavGroup",
  props: {
    compact: Boolean,
    visible: Boolean
  },
  emits: ["visible-change"],
  setup(props, { slots, emit }) {
    const visible = ref();
    const navGroupRef = ref();
    const visibleGroup = ref();
    const handleVisibleChange = (visible2, index) => {
      if (visible2) {
        visibleGroup.value = index;
      } else {
        if (visibleGroup.value === index) {
          visibleGroup.value = 0;
        }
      }
    };
    const isVisible2 = (index) => Boolean(visibleGroup.value === index);
    onMounted(() => {
      visible.value = props.visible;
      props.visible && navGroupRef.value.classList.add("show");
      emit("visible-change", visible.value);
    });
    watch(() => props.visible, () => {
      visible.value = props.visible;
      if (visible.value === false) {
        visibleGroup.value = void 0;
      }
    });
    watch(visible, () => {
      emit("visible-change", visible.value);
    });
    const handleTogglerClick = () => {
      visible.value = !visible.value;
      emit("visible-change", visible.value);
    };
    const handleBeforeEnter = (el) => {
      el.style.height = "0px";
      navGroupRef.value.classList.add("show");
    };
    const handleEnter = (el, done) => {
      executeAfterTransition(() => done(), el);
      el.style.height = `${el.scrollHeight}px`;
    };
    const handleAfterEnter = (el) => {
      el.style.height = "auto";
    };
    const handleBeforeLeave = (el) => {
      el.style.height = `${el.scrollHeight}px`;
    };
    const handleLeave = (el, done) => {
      executeAfterTransition(() => done(), el);
      setTimeout(() => {
        el.style.height = "0px";
      }, 1);
    };
    const handleAfterLeave = () => {
      navGroupRef.value.classList.remove("show");
    };
    return () => h("li", {
      class: "nav-group",
      ref: navGroupRef
    }, [
      slots.togglerContent && h("a", {
        class: ["nav-link", "nav-group-toggle"],
        onClick: handleTogglerClick
      }, slots.togglerContent && slots.togglerContent()),
      h(Transition, {
        css: false,
        onBeforeEnter: (el) => handleBeforeEnter(el),
        onEnter: (el, done) => handleEnter(el, done),
        onAfterEnter: (el) => handleAfterEnter(el),
        onBeforeLeave: (el) => handleBeforeLeave(el),
        onLeave: (el, done) => handleLeave(el, done),
        onAfterLeave: () => handleAfterLeave()
      }, {
        default: () => visible.value && h("ul", {
          class: [
            "nav-group-items",
            {
              compact: props.compact
            }
          ]
        }, slots.default && slots.default().map((vnode, index) => {
          if (vnode.type.name === "CNavGroup") {
            return h(vnode, {
              onVisibleChange: (visible2) => handleVisibleChange(visible2, index + 1),
              ...visibleGroup.value && { visible: isVisible2(index + 1) }
            });
          }
          return vnode;
        }))
      })
    ]);
  }
});
var CNavGroupItems = defineComponent({
  name: "CNavGroupItems",
  setup(_2, { slots }) {
    return () => h("ul", { class: "nav-group-items" }, slots.default && slots.default());
  }
});
var CNavLink = defineComponent({
  name: "CNavLink",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    component: {
      type: String,
      required: false,
      default: "a"
    },
    disabled: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(CLink, {
      class: "nav-link",
      active: props.active,
      component: props.component,
      disabled: props.disabled,
      href: props.href
    }, {
      default: () => slots.default && slots.default()
    });
  }
});
var CNavItem = defineComponent({
  name: "CNavItem",
  props: {
    ...CNavLink.props
  },
  setup(props, { slots }) {
    return () => h("li", {
      class: "nav-item"
    }, props.href ? h(CNavLink, {
      active: props.active,
      component: props.component,
      disabled: props.disabled,
      href: props.href
    }, {
      default: () => slots.default && slots.default()
    }) : slots.default && slots.default());
  }
});
var CNavTitle = defineComponent({
  name: "CNavTitle",
  setup(_2, { slots }) {
    return () => h("li", { class: "nav-title" }, slots.default && slots.default());
  }
});
var CNavPlugin = {
  install: (app) => {
    app.component(CNav.name, CNav);
    app.component(CNavGroup.name, CNavGroup);
    app.component(CNavGroupItems.name, CNavGroupItems);
    app.component(CNavItem.name, CNavItem);
    app.component(CNavLink.name, CNavLink);
    app.component(CNavTitle.name, CNavTitle);
  }
};
var CNavbar = defineComponent({
  name: "CNavbar",
  props: {
    color: Color,
    colorScheme: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["dark", "light"].includes(value);
      }
    },
    component: {
      type: String,
      default: "nav",
      required: false
    },
    container: {
      type: [Boolean, String],
      default: void 0,
      required: false,
      validator: (value) => {
        return typeof value === "boolean" || ["sm", "md", "lg", "xl", "xxl", "fluid"].includes(value);
      }
    },
    expand: {
      type: [Boolean, String],
      default: void 0,
      required: false,
      validator: (value) => {
        return typeof value === "boolean" || ["sm", "md", "lg", "xl", "xxl"].includes(value);
      }
    },
    placement: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["fixed-top", "fixed-bottom", "sticky-top"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: [
        "navbar",
        {
          [`bg-${props.color}`]: props.color,
          [`navbar-${props.colorScheme}`]: props.colorScheme,
          [typeof props.expand === "boolean" ? "navbar-expand" : `navbar-expand-${props.expand}`]: props.expand
        },
        props.placement
      ]
    }, props.container ? h("div", { class: [`container${props.container !== true ? "-" + props.container : ""}`] }, slots.default && slots.default()) : slots.default && slots.default());
  }
});
var CNavbarBrand = defineComponent({
  name: "CNavbarBrand",
  props: {
    component: {
      type: String,
      default: "a",
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(props.component ? props.component : props.href ? "a" : "span", {
      class: "navbar-brand",
      href: props.href
    }, slots.default && slots.default());
  }
});
var CNavbarNav = defineComponent({
  name: "CNavbarNav",
  props: {
    component: {
      type: String,
      required: false,
      default: "ul"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, {
      class: "navbar-nav",
      role: "navigation"
    }, slots.default && slots.default());
  }
});
var CNavbarText = defineComponent({
  name: "CNavbarText",
  setup(_2, { slots }) {
    return () => h("span", { class: "navbar-text" }, slots.default && slots.default());
  }
});
var CNavbarToggler = defineComponent({
  name: "CNavbarToggler",
  setup(_2, { slots }) {
    return () => h("button", {
      class: "navbar-toggler"
    }, slots.default ? slots.default() : h("span", { class: ["navbar-toggler-icon"] }));
  }
});
var CNavbarPlugin = {
  install: (app) => {
    app.component(CNavbar.name, CNavbar);
    app.component(CNavbarBrand.name, CNavbarBrand);
    app.component(CNavbarNav.name, CNavbarNav);
    app.component(CNavbarText.name, CNavbarText);
    app.component(CNavbarToggler.name, CNavbarToggler);
  }
};
var COffcanvas = defineComponent({
  name: "COffcanvas",
  props: {
    backdrop: {
      type: Boolean,
      default: true,
      require: false
    },
    keyboard: {
      type: Boolean,
      default: true,
      require: false
    },
    placement: {
      type: String,
      default: void 0,
      require: true,
      validator: (value) => {
        return ["start", "end", "top", "bottom"].includes(value);
      }
    },
    scroll: {
      type: Boolean,
      default: false,
      required: false
    },
    visible: {
      type: Boolean,
      require: false
    }
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const offcanvasRef = ref();
    const visible = ref(props.visible);
    watch(() => props.visible, () => {
      visible.value = props.visible;
    });
    watch(visible, () => {
      if (visible.value) {
        if (!props.scroll) {
          document.body.style.overflow = "hidden";
          document.body.style.paddingRight = "0px";
        }
        return;
      }
      if (!props.scroll) {
        document.body.style.removeProperty("overflow");
        document.body.style.removeProperty("padding-right");
      }
    });
    const handleEnter = (el, done) => {
      emit("show");
      executeAfterTransition(() => done(), el);
      setTimeout(() => {
        el.style.visibility = "visible";
        el.classList.add("show");
      }, 1);
    };
    const handleAfterEnter = () => {
      window.addEventListener("mousedown", handleMouseDown);
      window.addEventListener("keyup", handleKeyUp);
    };
    const handleLeave = (el, done) => {
      executeAfterTransition(() => done(), el);
      window.removeEventListener("mousedown", handleMouseDown);
      window.removeEventListener("keyup", handleKeyUp);
      el.classList.remove("show");
    };
    const handleAfterLeave = (el) => {
      el.style.visibility = "hidden";
    };
    const handleDismiss = () => {
      visible.value = false;
      emit("hide");
    };
    const handleKeyUp = (event) => {
      if (offcanvasRef.value && !offcanvasRef.value.contains(event.target)) {
        if (event.key === "Escape" && props.keyboard && props.backdrop) {
          return handleDismiss();
        }
      }
    };
    const handleMouseDown = (event) => {
      window.addEventListener("mouseup", () => handleMouseUp(event), { once: true });
    };
    const handleMouseUp = (event) => {
      if (offcanvasRef.value && !offcanvasRef.value.contains(event.target)) {
        props.backdrop && handleDismiss();
      }
    };
    return () => [
      h(Transition, {
        css: false,
        onEnter: (el, done) => handleEnter(el, done),
        onAfterEnter: () => handleAfterEnter(),
        onLeave: (el, done) => handleLeave(el, done),
        onAfterLeave: (el) => handleAfterLeave(el)
      }, () => withDirectives(h("div", {
        class: [
          "offcanvas",
          {
            [`offcanvas-${props.placement}`]: props.placement
          }
        ],
        ref: offcanvasRef,
        role: "dialog"
      }, slots.default && slots.default()), [[vVisible, props.visible]])),
      props.backdrop && h(CBackdrop, {
        class: "offcanvas-backdrop",
        visible: visible.value
      })
    ];
  }
});
var COffcanvasBody = defineComponent({
  name: "COffcanvasBody",
  setup(_2, { slots }) {
    return () => h("div", { class: "offcanvas-body" }, slots.default && slots.default());
  }
});
var COffcanvasHeader = defineComponent({
  name: "COffcanvasHeader",
  setup(_2, { slots }) {
    return () => h("div", { class: "offcanvas-header" }, slots.default && slots.default());
  }
});
var COffcanvasTitle = defineComponent({
  name: "COffcanvasTitle",
  props: {
    component: {
      type: String,
      required: false,
      default: "h5"
    }
  },
  setup(props, { slots }) {
    return () => h(props.component, { class: "offcanvas-title" }, slots.default && slots.default());
  }
});
var COffcanvasPlugin = {
  install: (app) => {
    app.component(COffcanvas.name, COffcanvas);
    app.component(COffcanvasBody.name, COffcanvasBody);
    app.component(COffcanvasHeader.name, COffcanvasHeader);
    app.component(COffcanvasTitle.name, COffcanvasTitle);
  }
};
var CPagination = defineComponent({
  name: "CPagination",
  props: {
    align: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["start", "center", "end"].includes(value);
      }
    },
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["sm", "lg"].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h("nav", {}, h("ul", {
      class: [
        "pagination",
        {
          [`justify-content-${props.align}`]: props.align,
          [`pagination-${props.size}`]: props.size
        }
      ]
    }, slots.default && slots.default()));
  }
});
var CPaginationItem = defineComponent({
  name: "CPaginationItem",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    component: {
      type: String,
      default: void 0,
      required: false
    },
    disabled: {
      type: Boolean,
      required: false
    },
    href: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => {
      const component = props.component ? props.component : props.active ? "span" : "a";
      return h("li", {
        class: [
          "page-item",
          {
            ["active"]: props.active,
            ["disabled"]: props.disabled
          }
        ],
        ...props.active && { active: props.active, "aria-current": "page" }
      }, component === "a" ? h(CLink, {
        class: ["page-link"],
        component,
        href: props.href
      }, {
        default: () => slots.default && slots.default()
      }) : h(component, { class: ["page-link"] }, slots.default && slots.default()));
    };
  }
});
var CPaginationPlugin = {
  install: (app) => {
    app.component(CPagination.name, CPagination);
    app.component(CPaginationItem.name, CPaginationItem);
  }
};
var BREAKPOINTS$1 = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];
var CPlaceholder = defineComponent({
  name: "CPlaceholder",
  props: {
    animation: {
      type: String,
      default: void 0,
      require: false,
      validator: (value) => {
        return ["glow", "wave"].includes(value);
      }
    },
    color: Color,
    component: {
      type: String,
      default: "span",
      required: false
    },
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["xs", "sm", "lg"].includes(value);
      }
    },
    xs: {
      type: Number,
      default: void 0,
      require: false
    },
    sm: {
      type: Number,
      default: void 0,
      require: false
    },
    md: {
      type: Number,
      default: void 0,
      require: false
    },
    lg: {
      type: Number,
      default: void 0,
      require: false
    },
    xl: {
      type: Number,
      default: void 0,
      require: false
    },
    xxl: {
      type: Number,
      default: void 0,
      require: false
    }
  },
  setup(props, { slots }) {
    const repsonsiveClassNames = [];
    BREAKPOINTS$1.forEach((bp) => {
      const breakpoint = props[bp];
      const infix = bp === "xs" ? "" : `-${bp}`;
      if (typeof breakpoint === "number") {
        repsonsiveClassNames.push(`col${infix}-${breakpoint}`);
      }
      if (typeof breakpoint === "boolean") {
        repsonsiveClassNames.push(`col${infix}`);
      }
    });
    return () => h(props.component, {
      class: [
        props.animation ? `placeholder-${props.animation}` : "placeholder",
        {
          [`bg-${props.color}`]: props.color,
          [`placeholder-${props.size}`]: props.size
        },
        repsonsiveClassNames
      ]
    }, slots.default && slots.default());
  }
});
var CPlaceholderPlugin = {
  install: (app) => {
    app.component(CPlaceholder.name, CPlaceholder);
  }
};
var CProgressBar = defineComponent({
  name: "CProgressBar",
  props: {
    animated: {
      type: Boolean,
      required: false
    },
    color: Color,
    value: {
      type: Number,
      required: false,
      default: 0
    },
    variant: {
      type: String,
      default: void 0,
      require: false,
      validator: (value) => {
        return value === "striped";
      }
    }
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "progress-bar",
        `bg-${props.color}`,
        {
          [`progress-bar-${props.variant}`]: props.variant,
          ["progress-bar-animated"]: props.animated
        }
      ],
      role: "progressbar",
      style: `width: ${props.value}%`,
      "aria-valuenow": props.value,
      "aria-valuemin": "0",
      "aria-valuemax": "100"
    }, slots.default && slots.default());
  }
});
var CProgress = defineComponent({
  name: "CProgress",
  props: {
    height: {
      type: Number,
      default: void 0,
      required: false
    },
    thin: Boolean,
    white: Boolean,
    ...CProgressBar.props
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "progress",
        {
          "progress-thin": props.thin,
          "progress-white": props.white
        }
      ],
      ...(props.height, { style: `height: ${props.height}px` })
    }, props.value ? h(CProgressBar, {
      value: props.value,
      animated: props.animated,
      color: props.color,
      variant: props.variant
    }, slots.default && slots.default()) : slots.default && slots.default());
  }
});
var CProgressPlugin = {
  install: (app) => {
    app.component(CProgress.name, CProgress);
    app.component(CProgressBar.name, CProgressBar);
  }
};
var CPopover = defineComponent({
  name: "CPopover",
  props: {
    content: {
      type: String,
      default: void 0,
      required: false
    },
    offset: {
      type: Array,
      default: () => [0, 8],
      required: false
    },
    placement: {
      type: String,
      default: "top",
      required: false,
      validator: (value) => {
        return ["top", "right", "bottom", "left"].includes(value);
      }
    },
    title: {
      type: String,
      default: void 0,
      required: false
    },
    trigger: {
      type: [String, Array],
      default: "click",
      required: false,
      validator: (value) => {
        if (typeof value === "string") {
          return ["click", "focus", "hover"].includes(value);
        }
        if (Array.isArray(value)) {
          return value.every((e) => ["click", "focus", "hover"].includes(e));
        }
        return false;
      }
    },
    visible: Boolean
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const togglerRef = ref();
    const popoverRef = ref();
    const popper2 = ref();
    const visible = ref(props.visible);
    const handleEnter = (el, done) => {
      emit("show");
      initPopper();
      el.classList.add("show");
      executeAfterTransition(() => done(), el);
    };
    const handleLeave = (el, done) => {
      emit("hide");
      el.classList.remove("show");
      executeAfterTransition(() => {
        done();
        destroyPopper();
      }, el);
    };
    const handleToggle = (event) => {
      togglerRef.value = event.target;
      visible.value = !visible.value;
    };
    const initPopper = () => {
      if (togglerRef.value) {
        popper2.value = createPopper(togglerRef.value, popoverRef.value, {
          placement: props.placement,
          modifiers: [
            {
              name: "offset",
              options: {
                offset: props.offset
              }
            }
          ]
        });
      }
    };
    const destroyPopper = () => {
      if (popper2.value) {
        popper2.value.destroy();
      }
      popper2.value = void 0;
    };
    return () => [
      h(Teleport, {
        to: "body"
      }, h(Transition, {
        onEnter: (el, done) => handleEnter(el, done),
        onLeave: (el, done) => handleLeave(el, done)
      }, () => visible.value && h("div", {
        class: "popover fade bs-popover-auto",
        ref: popoverRef,
        role: "tooltip"
      }, [
        h("div", { class: "popover-arrow", "data-popper-arrow": "" }),
        (props.title || slots.title) && h("div", { class: "popover-header" }, {
          default: () => slots.title && slots.title() || props.title
        }),
        (props.content || slots.content) && h("div", { class: "popover-body" }, {
          default: () => slots.content && slots.content() || props.content
        })
      ]))),
      slots.toggler && slots.toggler({
        on: {
          click: (event) => props.trigger.includes("click") && handleToggle(event),
          blur: (event) => props.trigger.includes("focus") && handleToggle(event),
          focus: (event) => props.trigger.includes("focus") && handleToggle(event),
          mouseenter: (event) => props.trigger.includes("hover") && handleToggle(event),
          mouseleave: (event) => props.trigger.includes("hover") && handleToggle(event)
        }
      })
    ];
  }
});
var CPopoverPlugin = {
  install: (app) => {
    app.component(CPopover.name, CPopover);
  }
};
var isOnMobile = (element) => Boolean(getComputedStyle(element).getPropertyValue("--cui-is-mobile"));
var isVisible = (element) => {
  const rect = element.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var CSidebar = defineComponent({
  name: "CSidebar",
  props: {
    narrow: {
      type: Boolean,
      required: false
    },
    overlaid: {
      type: Boolean,
      required: false
    },
    position: {
      type: String,
      default: void 0,
      validator: (value) => {
        return ["fixed"].includes(value);
      }
    },
    size: {
      type: String,
      default: void 0,
      validator: (value) => {
        return ["sm", "lg", "xl"].includes(value);
      }
    },
    unfoldable: Boolean,
    visible: Boolean
  },
  emits: [
    "hide",
    "show",
    "visible-change"
  ],
  setup(props, { attrs, slots, emit }) {
    const mobile = ref();
    const inViewport = ref();
    const sidebarRef = ref();
    const visible = ref(props.visible);
    watch(inViewport, () => {
      emit("visible-change", inViewport.value);
      inViewport.value ? emit("show") : emit("hide");
    });
    watch(() => props.visible, () => visible.value = props.visible);
    watch(mobile, () => {
      if (mobile.value && visible.value)
        visible.value = false;
    });
    onMounted(() => {
      mobile.value = isOnMobile(sidebarRef.value);
      inViewport.value = isVisible(sidebarRef.value);
      window.addEventListener("resize", () => handleResize());
      window.addEventListener("mouseup", handleClickOutside);
      window.addEventListener("keyup", handleKeyup);
      sidebarRef.value.addEventListener("mouseup", handleOnClick);
      sidebarRef.value.addEventListener("transitionend", () => {
        inViewport.value = isVisible(sidebarRef.value);
      });
    });
    onBeforeUnmount(() => {
      window.removeEventListener("resize", () => handleResize());
      window.removeEventListener("mouseup", handleClickOutside);
      window.removeEventListener("keyup", handleKeyup);
      sidebarRef.value.removeEventListener("mouseup", handleOnClick);
      sidebarRef.value.removeEventListener("transitionend", () => {
        inViewport.value = isVisible(sidebarRef.value);
      });
    });
    const handleHide = () => {
      visible.value = false;
      emit("visible-change", false);
    };
    const handleResize = () => {
      mobile.value = isOnMobile(sidebarRef.value);
      inViewport.value = isVisible(sidebarRef.value);
    };
    const handleKeyup = (event) => {
      if (mobile.value && !sidebarRef.value.contains(event.target)) {
        handleHide();
      }
    };
    const handleClickOutside = (event) => {
      if (mobile.value && !sidebarRef.value.contains(event.target)) {
        handleHide();
      }
    };
    const handleOnClick = (event) => {
      const target = event.target;
      target && target.classList.contains("nav-link") && !target.classList.contains("nav-group-toggle") && mobile.value && handleHide();
    };
    return () => [
      h("div", {
        class: [
          "sidebar",
          {
            "sidebar-narrow": props.narrow,
            "sidebar-overlaid": props.overlaid,
            [`sidebar-${props.position}`]: props.position,
            [`sidebar-${props.size}`]: props.size,
            "sidebar-narrow-unfoldable": props.unfoldable,
            show: visible.value === true && mobile.value,
            hide: visible.value === false && !mobile.value
          },
          attrs.class
        ],
        ref: sidebarRef
      }, slots.default && slots.default()),
      mobile.value && h(CBackdrop, {
        class: "sidebar-backdrop d-none",
        visible: props.visible,
        onClick: () => handleHide()
      })
    ];
  }
});
var CSidebarBrand = defineComponent({
  name: "CSidebarBrand",
  setup(_2, { slots }) {
    return () => h("div", { class: "sidebar-brand" }, slots.default && slots.default());
  }
});
var CSidebarFooter = defineComponent({
  name: "CSidebarFooter",
  setup(_2, { slots }) {
    return () => h("div", { class: "sidebar-footer" }, slots.default && slots.default());
  }
});
var CSidebarHeader = defineComponent({
  name: "CSidebarHeader",
  setup(_2, { slots }) {
    return () => h("div", { class: "sidebar-header" }, slots.default && slots.default());
  }
});
var CSidebarNav = defineComponent({
  name: "CSidebarNav",
  setup(_2, { slots }) {
    const visibleGroup = ref();
    const handleVisibleChange = (visible, index) => {
      if (visible) {
        visibleGroup.value = index;
      } else {
        if (visibleGroup.value === index) {
          visibleGroup.value = 0;
        }
      }
    };
    const isVisible2 = (index) => Boolean(visibleGroup.value === index);
    return () => h("ul", {
      class: "sidebar-nav"
    }, slots.default && slots.default().map((vnode, index) => {
      if (vnode.type.name === "CNavGroup") {
        return h(vnode, {
          onVisibleChange: (visible) => handleVisibleChange(visible, index + 1),
          ...visibleGroup.value && { visible: isVisible2(index + 1) }
        });
      }
      return vnode;
    }));
  }
});
var CSidebarToggler = defineComponent({
  name: "CSidebarToggler",
  setup(_2, { slots }) {
    return () => h("button", { class: "sidebar-toggler" }, slots.default && slots.default());
  }
});
var CSidebarPlugin = {
  install: (app) => {
    app.component(CSidebar.name, CSidebar);
    app.component(CSidebarBrand.name, CSidebarBrand);
    app.component(CSidebarFooter.name, CSidebarFooter);
    app.component(CSidebarHeader.name, CSidebarHeader);
    app.component(CSidebarNav.name, CSidebarNav);
    app.component(CSidebarToggler.name, CSidebarToggler);
  }
};
var CSpinner = defineComponent({
  name: "CSpinner",
  props: {
    color: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return [
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "dark",
          "light"
        ].includes(value);
      }
    },
    component: {
      type: String,
      default: "div",
      required: false
    },
    size: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return value === "sm";
      }
    },
    variant: {
      type: String,
      default: "border",
      required: false,
      validator: (value) => {
        return ["border", "grow"].includes(value);
      }
    },
    visuallyHiddenLabel: {
      type: String,
      default: "Loading...",
      required: false
    }
  },
  setup(props) {
    return () => h(props.component, {
      class: [
        `spinner-${props.variant}`,
        `text-${props.color}`,
        props.size && `spinner-${props.variant}-${props.size}`
      ],
      role: "status"
    }, h("span", { class: ["visually-hidden"] }, props.visuallyHiddenLabel));
  }
});
var CSpinnerPlugin = {
  install: (app) => {
    app.component(CSpinner.name, CSpinner);
  }
};
var CTableBody = defineComponent({
  name: "CTableBody",
  props: {
    color: Color
  },
  setup(props, { slots }) {
    return () => h("tbody", {
      class: [
        {
          [`table-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var CTableCaption = defineComponent({
  name: "CTableCaption",
  props: {},
  setup(_2, { slots }) {
    return () => h("caption", {}, slots.default && slots.default());
  }
});
var CTableDataCell = defineComponent({
  name: "CTableDataCell",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    align: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["bottom", "middle", "top"].includes(value);
      }
    },
    color: Color,
    scope: {
      type: String,
      required: false
    }
  },
  setup(props, { slots }) {
    return () => h(props.scope ? "th" : "td", {
      class: [
        {
          [`align-${props.align}`]: props.align,
          "table-active": props.active,
          [`table-${props.color}`]: props.color
        }
      ],
      ...props.scope && { scope: props.scope }
    }, slots.default && slots.default());
  }
});
var CTableFoot = defineComponent({
  name: "CTableFoot",
  props: {
    color: Color
  },
  setup(props, { slots }) {
    return () => h("tfoot", {
      class: [
        {
          [`table-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var CTableHead = defineComponent({
  name: "CTableHead",
  props: {
    color: Color
  },
  setup(props, { slots }) {
    return () => h("thead", {
      class: [
        {
          [`table-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var CTableHeaderCell = defineComponent({
  name: "CTableHeaderCell",
  props: {
    color: Color
  },
  setup(props, { slots }) {
    return () => h("th", {
      class: [
        {
          [`table-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var CTableRow = defineComponent({
  name: "CTableRow",
  props: {
    active: {
      type: Boolean,
      required: false
    },
    align: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["bottom", "middle", "top"].includes(value);
      }
    },
    color: Color
  },
  setup(props, { slots }) {
    return () => h("tr", {
      class: [
        {
          [`align-${props.align}`]: props.align,
          "table-active": props.active,
          [`table-${props.color}`]: props.color
        }
      ]
    }, slots.default && slots.default());
  }
});
var pretifyName = (name) => {
  return name.replace(/[-_.]/g, " ").replace(/ +/g, " ").replace(/([a-z0-9])([A-Z])/g, "$1 $2").split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
};
var label = (column) => typeof column === "object" ? column.label !== void 0 ? column.label : pretifyName(column.key) : pretifyName(column);
var CTable = defineComponent({
  name: "CTable",
  props: {
    align: {
      type: String,
      default: void 0,
      required: false,
      validator: (value) => {
        return ["bottom", "middle", "top"].includes(value);
      }
    },
    borderColor: Color,
    bordered: {
      type: Boolean,
      required: false
    },
    borderless: {
      type: Boolean,
      required: false
    },
    caption: {
      type: String,
      default: void 0,
      required: false
    },
    captionTop: {
      type: String,
      default: void 0,
      required: false
    },
    columns: {
      type: Array,
      required: false
    },
    color: Color,
    footer: {
      type: Array,
      default: () => [],
      required: false
    },
    hover: {
      type: Boolean,
      required: false
    },
    items: {
      type: Array,
      default: () => [],
      required: false
    },
    responsive: {
      type: [Boolean, String],
      default: void 0,
      required: false,
      validator: (value) => {
        if (typeof value == "string") {
          return ["sm", "md", "lg", "xl", "xxl"].includes(value);
        }
        if (typeof value == "boolean") {
          return true;
        }
        return false;
      }
    },
    small: {
      type: Boolean,
      required: false
    },
    striped: {
      type: Boolean,
      required: false
    },
    stripedColumns: {
      type: Boolean,
      required: false
    },
    tableFootProps: {
      type: Object,
      default: void 0,
      required: false
    },
    tableHeadProps: {
      type: Object,
      default: void 0,
      required: false
    }
  },
  setup(props, { slots, attrs }) {
    const rawColumnNames = computed(() => props.columns ? props.columns.map((column) => {
      if (typeof column === "object")
        return column.key;
      else
        return column;
    }) : Object.keys(props.items[0] || {}).filter((el) => el.charAt(0) !== "_"));
    const table = () => h("table", {
      class: [
        "table",
        {
          [`align-${props.align}`]: props.align,
          [`caption-top`]: props.captionTop || props.caption === "top",
          [`border-${props.borderColor}`]: props.borderColor,
          "table-bordered": props.bordered,
          "table-borderless": props.borderless,
          [`table-${props.color}`]: props.color,
          "table-hover": props.hover,
          "table-sm": props.small,
          "table-striped": props.striped,
          "table-striped-columns": props.stripedColumns
        },
        attrs.class
      ]
    }, {
      default: () => [
        (props.caption && props.caption !== "top" || props.captionTop) && h(CTableCaption, {}, {
          default: () => props.caption || props.captionTop
        }),
        props.columns && h(CTableHead, {
          ...props.tableHeadProps
        }, {
          default: () => h(CTableRow, {}, {
            default: () => [
              props.columns && props.columns.map((column) => h(CTableHeaderCell, {
                ...typeof column === "object" && column._props && { ...column._props },
                ...typeof column === "object" && column._style && { style: { ...column._style } }
              }, {
                default: () => label(column)
              }))
            ]
          })
        }),
        props.items && h(CTableBody, {}, {
          default: () => [
            props.items.map((item) => h(CTableRow, {
              ...item._props && { ...item._props }
            }, {
              default: () => [
                rawColumnNames.value.map((colName) => item[colName] && h(CTableDataCell, {
                  ...item._cellProps && item._cellProps["all"] && { ...item._cellProps["all"] },
                  ...item._cellProps && item._cellProps[colName] && { ...item._cellProps[colName] }
                }, {
                  default: () => item[colName]
                }))
              ]
            }))
          ]
        }),
        slots.default && slots.default(),
        props.footer && h(CTableFoot, {
          ...props.tableFootProps
        }, {
          default: () => h(CTableRow, {}, {
            default: () => [
              props.footer.map((item) => h(CTableDataCell, {
                ...typeof item === "object" && item._props && { ...item._props }
              }, {
                default: () => typeof item === "object" ? item.label : item
              }))
            ]
          })
        })
      ]
    });
    return () => [
      props.responsive ? h("div", {
        class: typeof props.responsive === "boolean" ? "table-responsive" : `table-responsive-${props.responsive}`
      }, table()) : table()
    ];
  }
});
var CTablePlugin = {
  install: (app) => {
    app.component(CTable.name, CTable);
    app.component(CTableBody.name, CTableBody);
    app.component(CTableCaption.name, CTableCaption);
    app.component(CTableDataCell.name, CTableDataCell);
    app.component(CTableFoot.name, CTableFoot);
    app.component(CTableHead.name, CTableHead);
    app.component(CTableHeaderCell.name, CTableHeaderCell);
    app.component(CTableRow.name, CTableRow);
  }
};
var CTabContent = defineComponent({
  name: "CTabContent",
  setup(_2, { slots }) {
    return () => h("div", { class: "tab-content" }, slots.default && slots.default());
  }
});
var CTabPane = defineComponent({
  name: "CTabPane",
  props: {
    visible: {
      type: Boolean,
      default: false,
      required: false
    }
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const tabPaneRef = ref();
    const firstRender = ref(true);
    const handleEnter = (el, done) => {
      firstRender.value = false;
      emit("show");
      setTimeout(() => {
        executeAfterTransition(() => done(), el);
        el.classList.add("show");
      }, 1);
    };
    const handleLeave = (el, done) => {
      firstRender.value = false;
      emit("hide");
      el.classList.remove("show");
      executeAfterTransition(() => done(), el);
    };
    return () => h(Transition, {
      onEnter: (el, done) => handleEnter(el, done),
      onLeave: (el, done) => handleLeave(el, done)
    }, () => withDirectives(h("div", {
      class: [
        "tab-pane",
        "fade",
        {
          active: props.visible,
          show: firstRender.value && props.visible
        }
      ],
      ref: tabPaneRef
    }, slots.default && slots.default()), [[vShow, props.visible]]));
  }
});
var CTabsPlugin = {
  install: (app) => {
    app.component(CTabContent.name, CTabContent);
    app.component(CTabPane.name, CTabPane);
  }
};
var CToast = defineComponent({
  name: "CToast",
  props: {
    autohide: {
      type: Boolean,
      default: true,
      required: false
    },
    color: Color,
    delay: {
      type: Number,
      default: 5e3,
      required: false
    },
    dismissible: {
      type: Boolean,
      default: true,
      required: false
    },
    index: {
      type: Number,
      default: void 0,
      required: false
    },
    title: {
      type: String,
      default: void 0,
      required: false
    },
    visible: {
      type: Boolean,
      default: true,
      required: false
    }
  },
  emits: [
    "close",
    "show"
  ],
  setup(props, { slots, emit }) {
    const visible = ref(props.visible);
    let timeout = 0;
    const updateVisible = (v2) => {
      visible.value = v2;
    };
    provide("updateVisible", updateVisible);
    const handleBeforeEnter = (el) => {
      el.classList.add("showing");
    };
    const handleEnter = (el, done) => {
      executeAfterTransition(() => done(), el);
      el.classList.add("show");
      setTimeout(() => {
        el.classList.remove("showing");
      }, 1);
      if (props.index) {
        emit("show", props.index);
      } else {
        emit("show");
      }
    };
    const handleLeave = (el, done) => {
      executeAfterTransition(() => done(), el);
      el.classList.add("showing");
    };
    const handleAfterLeave = (el) => {
      el.classList.remove("show");
      el.classList.add("hide");
      if (props.index) {
        emit("close", props.index);
      } else {
        emit("close");
      }
    };
    onMounted(() => {
      if (props.autohide) {
        clearTimeout(timeout);
        timeout = window.setTimeout(() => {
          visible.value = false;
          emit("close");
        }, props.delay);
      }
    });
    return () => h(Transition, {
      appear: true,
      onBeforeEnter: (el) => handleBeforeEnter(el),
      onEnter: (el, done) => handleEnter(el, done),
      onLeave: (el, done) => handleLeave(el, done),
      onAfterLeave: (el) => handleAfterLeave(el)
    }, () => visible.value && h("div", {
      class: [
        "toast fade",
        {
          [`bg-${props.color}`]: props.color
        }
      ],
      "aria-live": "assertive",
      "aria-atomic": true,
      role: "alert",
      ref: "toastRef"
    }, slots.default && slots.default()));
  }
});
var CToastBody = defineComponent({
  name: "CToastBody",
  setup(_2, { slots }) {
    return () => h("div", { class: "toast-body" }, slots.default && slots.default());
  }
});
var CToastClose = defineComponent({
  name: "CToastClose",
  props: {
    component: {
      type: String,
      default: void 0,
      required: false
    },
    ...CCloseButton.props
  },
  emits: [
    "close"
  ],
  setup(props, { slots, emit }) {
    const updateVisible = inject("updateVisible");
    const handleClose = () => {
      emit("close");
      updateVisible(false);
    };
    return () => props.component ? h(props.component, {
      onClick: () => {
        handleClose();
      }
    }, () => slots.default && slots.default()) : h(CCloseButton, {
      ...props,
      onClick: () => {
        handleClose();
      }
    });
  }
});
var CToaster = defineComponent({
  name: "CToaster",
  props: {
    placement: {
      type: String,
      default: void 0,
      require: false,
      validator: (value) => {
        return [
          "top-start",
          "top-center",
          "top-end",
          "middle-start",
          "middle-center",
          "middle-end",
          "bottom-start",
          "bottom-center",
          "bottom-end"
        ].includes(value);
      }
    }
  },
  setup(props, { slots }) {
    return () => h("div", {
      class: [
        "toaster toast-container p-3",
        {
          "position-fixed": props.placement,
          "top-0": props.placement && props.placement.includes("top"),
          "top-50 translate-middle-y": props.placement && props.placement.includes("middle"),
          "bottom-0": props.placement && props.placement.includes("bottom"),
          "start-0": props.placement && props.placement.includes("start"),
          "start-50 translate-middle-x": props.placement && props.placement.includes("center"),
          "end-0": props.placement && props.placement.includes("end")
        }
      ]
    }, slots.default && slots.default());
  }
});
var CToastHeader = defineComponent({
  name: "CToastHeader",
  props: {
    closeButton: {
      type: Boolean,
      require: false
    }
  },
  emits: [
    "close"
  ],
  setup(props, { slots, emit }) {
    return () => h("div", { class: "toast-header" }, [
      slots.default && slots.default(),
      props.closeButton && h(CToastClose, {
        onClose: () => emit("close")
      })
    ]);
  }
});
var CToastPlugin = {
  install: (app) => {
    app.component(CToast.name, CToast);
    app.component(CToastBody.name, CToastBody);
    app.component(CToastClose.name, CToastClose);
    app.component(CToaster.name, CToaster);
    app.component(CToastHeader.name, CToastHeader);
  }
};
var CTooltip = defineComponent({
  name: "CTooltip",
  props: {
    content: {
      type: String,
      default: void 0,
      required: false
    },
    offset: {
      type: Array,
      default: () => [0, 0],
      required: false
    },
    placement: {
      type: String,
      default: "top",
      required: false,
      validator: (value) => {
        return ["top", "right", "bottom", "left"].includes(value);
      }
    },
    trigger: {
      type: [String, Array],
      default: "hover",
      required: false,
      validator: (value) => {
        if (typeof value === "string") {
          return ["click", "focus", "hover"].includes(value);
        }
        if (Array.isArray(value)) {
          return value.every((e) => ["click", "focus", "hover"].includes(e));
        }
        return false;
      }
    },
    visible: Boolean
  },
  emits: [
    "hide",
    "show"
  ],
  setup(props, { slots, emit }) {
    const togglerRef = ref();
    const tooltipRef = ref();
    const popper2 = ref();
    const visible = ref(props.visible);
    const handleEnter = (el, done) => {
      emit("show");
      initPopper();
      el.classList.add("show");
      executeAfterTransition(() => done(), el);
    };
    const handleLeave = (el, done) => {
      emit("hide");
      el.classList.remove("show");
      executeAfterTransition(() => {
        done();
        destroyPopper();
      }, el);
    };
    const handleToggle = (event) => {
      togglerRef.value = event.target;
      visible.value = !visible.value;
    };
    const initPopper = () => {
      if (togglerRef.value) {
        popper2.value = createPopper(togglerRef.value, tooltipRef.value, {
          placement: props.placement,
          modifiers: [
            {
              name: "offset",
              options: {
                offset: props.offset
              }
            }
          ]
        });
      }
    };
    const destroyPopper = () => {
      if (popper2.value) {
        popper2.value.destroy();
      }
      popper2.value = void 0;
    };
    return () => [
      h(Teleport, {
        to: "body"
      }, h(Transition, {
        onEnter: (el, done) => handleEnter(el, done),
        onLeave: (el, done) => handleLeave(el, done)
      }, () => visible.value && h("div", {
        class: "tooltip fade bs-tooltip-auto",
        ref: tooltipRef,
        role: "tooltip"
      }, [
        h("div", { class: "tooltip-arrow", "data-popper-arrow": "" }),
        (props.content || slots.content) && h("div", { class: "tooltip-inner" }, {
          default: () => slots.content && slots.content() || props.content
        })
      ]))),
      slots.toggler && slots.toggler({
        on: {
          click: (event) => props.trigger.includes("click") && handleToggle(event),
          blur: (event) => props.trigger.includes("focus") && handleToggle(event),
          focus: (event) => props.trigger.includes("focus") && handleToggle(event),
          mouseenter: (event) => props.trigger.includes("hover") && handleToggle(event),
          mouseleave: (event) => props.trigger.includes("hover") && handleToggle(event)
        }
      })
    ];
  }
});
var CTooltipPlugin = {
  install: (app) => {
    app.component(CTooltip.name, CTooltip);
  }
};
var CWidgetStatsA = defineComponent({
  name: "CWidgetStatsA",
  props: {
    color: {
      type: String,
      default: void 0,
      require: false
    },
    title: {
      type: String,
      default: void 0,
      require: false
    },
    value: {
      type: [Number, String],
      default: 0,
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {
      class: [
        { [`bg-${props.color}`]: props.color, "text-high-emphasis-inverse": props.color }
      ]
    }, () => [
      h(CCardBody, {
        class: "pb-0 d-flex justify-content-between align-items-start"
      }, () => [
        h("div", {}, [
          (props.value || slots.value) && h("div", { class: "fs-4 fw-semibold" }, {
            default: () => slots.value && slots.value() || props.value
          }),
          (props.title || slots.title) && h("div", {}, {
            default: () => slots.title && slots.title() || props.title
          })
        ]),
        slots.action && slots.action()
      ]),
      slots.chart && slots.chart(),
      slots.default && slots.default()
    ]);
  }
});
function isObject(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isPlainObject(o2) {
  var ctor, prot;
  if (isObject(o2) === false)
    return false;
  ctor = o2.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function t() {
  return t = Object.assign ? Object.assign.bind() : function(e) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var r2 = arguments[t2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (e[n2] = r2[n2]);
    }
    return e;
  }, t.apply(this, arguments);
}
function r(e, t2) {
  if (null == e)
    return {};
  var r2, n2, i2 = {}, o2 = Object.keys(e);
  for (n2 = 0; n2 < o2.length; n2++)
    t2.indexOf(r2 = o2[n2]) >= 0 || (i2[r2] = e[r2]);
  return i2;
}
var n = { silent: false, logLevel: "warn" };
var i = ["validator"];
var o = Object.prototype;
var a = o.toString;
var s = o.hasOwnProperty;
var u = /^\s*function (\w+)/;
function l(e) {
  var t2;
  const r2 = null !== (t2 = null == e ? void 0 : e.type) && void 0 !== t2 ? t2 : e;
  if (r2) {
    const e2 = r2.toString().match(u);
    return e2 ? e2[1] : "";
  }
  return "";
}
var c = isPlainObject;
var f = (e) => e;
var d = f;
if (true) {
  const e = "undefined" != typeof console;
  d = e ? function(e2, t2 = n.logLevel) {
    false === n.silent && console[t2](`[VueTypes warn]: ${e2}`);
  } : f;
}
var p = (e, t2) => s.call(e, t2);
var y = Number.isInteger || function(e) {
  return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
};
var v = Array.isArray || function(e) {
  return "[object Array]" === a.call(e);
};
var h2 = (e) => "[object Function]" === a.call(e);
var b = (e) => c(e) && p(e, "_vueTypes_name");
var g = (e) => c(e) && (p(e, "type") || ["_vueTypes_name", "validator", "default", "required"].some((t2) => p(e, t2)));
function O(e, t2) {
  return Object.defineProperty(e.bind(t2), "__original", { value: e });
}
function m(e, t2, r2 = false) {
  let n2, i2 = true, o2 = "";
  n2 = c(e) ? e : { type: e };
  const a2 = b(n2) ? n2._vueTypes_name + " - " : "";
  if (g(n2) && null !== n2.type) {
    if (void 0 === n2.type || true === n2.type)
      return i2;
    if (!n2.required && void 0 === t2)
      return i2;
    v(n2.type) ? (i2 = n2.type.some((e2) => true === m(e2, t2, true)), o2 = n2.type.map((e2) => l(e2)).join(" or ")) : (o2 = l(n2), i2 = "Array" === o2 ? v(t2) : "Object" === o2 ? c(t2) : "String" === o2 || "Number" === o2 || "Boolean" === o2 || "Function" === o2 ? function(e2) {
      if (null == e2)
        return "";
      const t3 = e2.constructor.toString().match(u);
      return t3 ? t3[1] : "";
    }(t2) === o2 : t2 instanceof n2.type);
  }
  if (!i2) {
    const e2 = `${a2}value "${t2}" should be of type "${o2}"`;
    return false === r2 ? (d(e2), false) : e2;
  }
  if (p(n2, "validator") && h2(n2.validator)) {
    const e2 = d, o3 = [];
    if (d = (e3) => {
      o3.push(e3);
    }, i2 = n2.validator(t2), d = e2, !i2) {
      const e3 = (o3.length > 1 ? "* " : "") + o3.join("\n* ");
      return o3.length = 0, false === r2 ? (d(e3), i2) : e3;
    }
  }
  return i2;
}
function j(e, t2) {
  const r2 = Object.defineProperties(t2, { _vueTypes_name: { value: e, writable: true }, isRequired: { get() {
    return this.required = true, this;
  } }, def: { value(e2) {
    return void 0 === e2 ? (p(this, "default") && delete this.default, this) : h2(e2) || true === m(this, e2, true) ? (this.default = v(e2) ? () => [...e2] : c(e2) ? () => Object.assign({}, e2) : e2, this) : (d(`${this._vueTypes_name} - invalid default value: "${e2}"`), this);
  } } }), { validator: n2 } = r2;
  return h2(n2) && (r2.validator = O(n2, r2)), r2;
}
function _(e, t2) {
  const r2 = j(e, t2);
  return Object.defineProperty(r2, "validate", { value(e2) {
    return h2(this.validator) && d(`${this._vueTypes_name} - calling .validate() will overwrite the current custom validator function. Validator info:
${JSON.stringify(this)}`), this.validator = O(e2, this), this;
  } });
}
function T(e, t2, n2) {
  const o2 = function(e2) {
    const t3 = {};
    return Object.getOwnPropertyNames(e2).forEach((r2) => {
      t3[r2] = Object.getOwnPropertyDescriptor(e2, r2);
    }), Object.defineProperties({}, t3);
  }(t2);
  if (o2._vueTypes_name = e, !c(n2))
    return o2;
  const { validator: a2 } = n2, s2 = r(n2, i);
  if (h2(a2)) {
    let { validator: e2 } = o2;
    e2 && (e2 = null !== (l2 = (u2 = e2).__original) && void 0 !== l2 ? l2 : u2), o2.validator = O(e2 ? function(t3) {
      return e2.call(this, t3) && a2.call(this, t3);
    } : a2, o2);
  }
  var u2, l2;
  return Object.assign(o2, s2);
}
function $(e) {
  return e.replace(/^(?!\s*$)/gm, "  ");
}
var w = () => _("any", {});
var P = () => _("function", { type: Function });
var x = () => _("boolean", { type: Boolean });
var E = () => _("string", { type: String });
var N = () => _("number", { type: Number });
var q = () => _("array", { type: Array });
var A = () => _("object", { type: Object });
var V = () => j("integer", { type: Number, validator: (e) => y(e) });
var S = () => j("symbol", { validator: (e) => "symbol" == typeof e });
function D(e, t2 = "custom validation failed") {
  if ("function" != typeof e)
    throw new TypeError("[VueTypes error]: You must provide a function as argument");
  return j(e.name || "<<anonymous function>>", { type: null, validator(r2) {
    const n2 = e(r2);
    return n2 || d(`${this._vueTypes_name} - ${t2}`), n2;
  } });
}
function L(e) {
  if (!v(e))
    throw new TypeError("[VueTypes error]: You must provide an array as argument.");
  const t2 = `oneOf - value should be one of "${e.join('", "')}".`, r2 = e.reduce((e2, t3) => {
    if (null != t3) {
      const r3 = t3.constructor;
      -1 === e2.indexOf(r3) && e2.push(r3);
    }
    return e2;
  }, []);
  return j("oneOf", { type: r2.length > 0 ? r2 : void 0, validator(r3) {
    const n2 = -1 !== e.indexOf(r3);
    return n2 || d(t2), n2;
  } });
}
function F(e) {
  if (!v(e))
    throw new TypeError("[VueTypes error]: You must provide an array as argument");
  let t2 = false, r2 = [];
  for (let n3 = 0; n3 < e.length; n3 += 1) {
    const i2 = e[n3];
    if (g(i2)) {
      if (b(i2) && "oneOf" === i2._vueTypes_name && i2.type) {
        r2 = r2.concat(i2.type);
        continue;
      }
      if (h2(i2.validator) && (t2 = true), true === i2.type || !i2.type) {
        d('oneOfType - invalid usage of "true" or "null" as types.');
        continue;
      }
      r2 = r2.concat(i2.type);
    } else
      r2.push(i2);
  }
  r2 = r2.filter((e2, t3) => r2.indexOf(e2) === t3);
  const n2 = r2.length > 0 ? r2 : null;
  return j("oneOfType", t2 ? { type: n2, validator(t3) {
    const r3 = [], n3 = e.some((e2) => {
      const n4 = m(b(e2) && "oneOf" === e2._vueTypes_name ? e2.type || null : e2, t3, true);
      return "string" == typeof n4 && r3.push(n4), true === n4;
    });
    return n3 || d(`oneOfType - provided value does not match any of the ${r3.length} passed-in validators:
${$(r3.join("\n"))}`), n3;
  } } : { type: n2 });
}
function Y(e) {
  return j("arrayOf", { type: Array, validator(t2) {
    let r2 = "";
    const n2 = t2.every((t3) => (r2 = m(e, t3, true), true === r2));
    return n2 || d(`arrayOf - value validation error:
${$(r2)}`), n2;
  } });
}
function B(e) {
  return j("instanceOf", { type: e });
}
function I(e) {
  return j("objectOf", { type: Object, validator(t2) {
    let r2 = "";
    const n2 = Object.keys(t2).every((n3) => (r2 = m(e, t2[n3], true), true === r2));
    return n2 || d(`objectOf - value validation error:
${$(r2)}`), n2;
  } });
}
function J(e) {
  const t2 = Object.keys(e), r2 = t2.filter((t3) => {
    var r3;
    return !(null === (r3 = e[t3]) || void 0 === r3 || !r3.required);
  }), n2 = j("shape", { type: Object, validator(n3) {
    if (!c(n3))
      return false;
    const i2 = Object.keys(n3);
    if (r2.length > 0 && r2.some((e2) => -1 === i2.indexOf(e2))) {
      const e2 = r2.filter((e3) => -1 === i2.indexOf(e3));
      return d(1 === e2.length ? `shape - required property "${e2[0]}" is not defined.` : `shape - required properties "${e2.join('", "')}" are not defined.`), false;
    }
    return i2.every((r3) => {
      if (-1 === t2.indexOf(r3))
        return true === this._vueTypes_isLoose || (d(`shape - shape definition does not include a "${r3}" property. Allowed keys: "${t2.join('", "')}".`), false);
      const i3 = m(e[r3], n3[r3], true);
      return "string" == typeof i3 && d(`shape - "${r3}" property validation error:
 ${$(i3)}`), true === i3;
    });
  } });
  return Object.defineProperty(n2, "_vueTypes_isLoose", { writable: true, value: false }), Object.defineProperty(n2, "loose", { get() {
    return this._vueTypes_isLoose = true, this;
  } }), n2;
}
var M = ["name", "validate", "getter"];
var R = (() => {
  var e;
  return (e = class {
    static get any() {
      return w();
    }
    static get func() {
      return P().def(this.defaults.func);
    }
    static get bool() {
      return x().def(this.defaults.bool);
    }
    static get string() {
      return E().def(this.defaults.string);
    }
    static get number() {
      return N().def(this.defaults.number);
    }
    static get array() {
      return q().def(this.defaults.array);
    }
    static get object() {
      return A().def(this.defaults.object);
    }
    static get integer() {
      return V().def(this.defaults.integer);
    }
    static get symbol() {
      return S();
    }
    static get nullable() {
      return { type: null };
    }
    static extend(e2) {
      if (v(e2))
        return e2.forEach((e3) => this.extend(e3)), this;
      const { name: t2, validate: n2 = false, getter: i2 = false } = e2, o2 = r(e2, M);
      if (p(this, t2))
        throw new TypeError(`[VueTypes error]: Type "${t2}" already defined`);
      const { type: a2 } = o2;
      if (b(a2))
        return delete o2.type, Object.defineProperty(this, t2, i2 ? { get: () => T(t2, a2, o2) } : { value(...e3) {
          const r2 = T(t2, a2, o2);
          return r2.validator && (r2.validator = r2.validator.bind(r2, ...e3)), r2;
        } });
      let s2;
      return s2 = i2 ? { get() {
        const e3 = Object.assign({}, o2);
        return n2 ? _(t2, e3) : j(t2, e3);
      }, enumerable: true } : { value(...e3) {
        const r2 = Object.assign({}, o2);
        let i3;
        return i3 = n2 ? _(t2, r2) : j(t2, r2), r2.validator && (i3.validator = r2.validator.bind(i3, ...e3)), i3;
      }, enumerable: true }, Object.defineProperty(this, t2, s2);
    }
  }).defaults = {}, e.sensibleDefaults = void 0, e.config = n, e.custom = D, e.oneOf = L, e.instanceOf = B, e.oneOfType = F, e.arrayOf = Y, e.objectOf = I, e.shape = J, e.utils = { validate: (e2, t2) => true === m(t2, e2, true), toType: (e2, t2, r2 = false) => r2 ? _(e2, t2) : j(e2, t2) }, e;
})();
function z(e = { func: () => {
}, bool: true, string: "", number: 0, array: () => [], object: () => ({}), integer: 0 }) {
  var r2;
  return (r2 = class extends R {
    static get sensibleDefaults() {
      return t({}, this.defaults);
    }
    static set sensibleDefaults(r3) {
      this.defaults = false !== r3 ? t({}, true !== r3 ? r3 : e) : {};
    }
  }).defaults = t({}, e), r2;
}
var C = class extends z() {
};
var CWidgetStatsB = defineComponent({
  name: "CWidgetStatsB",
  props: {
    color: Color,
    inverse: {
      type: Boolean,
      default: void 0,
      require: false
    },
    progress: J({
      color: Color,
      value: {
        type: Number,
        default: 0
      }
    }),
    text: {
      type: String,
      default: void 0,
      require: false
    },
    title: {
      type: String,
      default: void 0,
      require: false
    },
    value: {
      type: [Number, String],
      default: 0,
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {
      class: [
        {
          "text-high-emphasis-inverse": props.inverse
        }
      ],
      color: props.color
    }, () => h(CCardBody, {
      class: "card-body"
    }, () => [
      (props.value || slots.value) && h("div", {
        class: "fs-4 fw-semibold"
      }, {
        default: () => slots.value && slots.value() || props.value
      }),
      (props.title || slots.title) && h("div", {}, {
        default: () => slots.title && slots.title() || props.title
      }),
      h(CProgress, {
        class: "my-2",
        ...props.progress && props.progress.color && { color: props.progress.color },
        height: 4,
        ...props.progress && props.progress.value && { value: props.progress.value },
        white: props.inverse
      }),
      (props.text || slots.text) && h("small", {
        class: [
          props.inverse ? "text-medium-emphasis-inverse" : "text-medium-emphasis"
        ]
      }, {
        default: () => slots.text && slots.text() || props.text
      })
    ]));
  }
});
var CWidgetStatsC = defineComponent({
  name: "CWidgetStatsC",
  props: {
    color: Color,
    inverse: {
      type: Boolean,
      default: void 0,
      require: false
    },
    progress: J({
      color: Color,
      value: {
        type: Number,
        default: 0
      }
    }),
    title: {
      type: String,
      default: void 0,
      require: false
    },
    value: {
      type: [Number, String],
      default: 0,
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {
      class: [
        {
          ["text-white"]: props.inverse
        }
      ],
      color: props.color
    }, () => h(CCardBody, {
      class: "card-body"
    }, () => [
      slots.icon && h("div", {
        class: [
          "text-end mb-4",
          props.inverse ? "text-medium-emphasis-inverse" : "text-medium-emphasis"
        ]
      }, slots.icon && slots.icon()),
      (props.value || slots.value) && h("div", {
        class: "fs-4 fw-semibold"
      }, {
        default: () => slots.value && slots.value() || props.value
      }),
      (props.title || slots.title) && h("div", {
        class: [
          "text-uppercase fw-semibold small",
          props.inverse ? "text-medium-emphasis-inverse" : "text-medium-emphasis"
        ]
      }, {
        default: () => slots.title && slots.title() || props.title
      }),
      h(CProgress, {
        class: "my-2",
        ...props.progress && props.progress.color && { color: props.progress.color },
        height: 4,
        ...props.progress && props.progress.value && { value: props.progress.value },
        white: props.inverse
      })
    ]));
  }
});
var CWidgetStatsD = defineComponent({
  name: "CWidgetStatsD",
  props: {
    color: Color,
    values: {
      type: Array,
      default: () => [],
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {}, {
      default: () => [
        h(CCardHeader, {
          class: [
            "position-relative d-flex justify-content-center align-items-center",
            {
              [`bg-${props.color}`]: props.color
            }
          ]
        }, () => [slots.icon && slots.icon(), slots.chart && slots.chart()]),
        h(CCardBody, {
          class: "row text-center"
        }, {
          default: () => props.values && props.values.map((value, index) => [
            index % 2 !== 0 && h("div", { class: "vr" }),
            h(CCol, {}, {
              default: () => [
                h(CCol, { class: "fs-5 fw-semibold" }, () => value.value),
                h(CCol, { class: "text-uppercase text-medium-emphasis small" }, () => value.title)
              ]
            })
          ])
        })
      ]
    });
  }
});
var CWidgetStatsE = defineComponent({
  name: "CWidgetStatsE",
  props: {
    title: {
      type: String,
      default: void 0,
      require: false
    },
    value: {
      type: [Number, String],
      default: 0,
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {}, () => h(CCardBody, {
      class: "text-center"
    }, () => [
      (props.title || slots.title) && h("div", {
        class: "text-muted small text-uppercase font-weight-bold"
      }, {
        default: () => slots.title && slots.title() || props.title
      }),
      (props.value || slots.value) && h("div", {
        class: "h2 py-3"
      }, {
        default: () => slots.value && slots.value() || props.value
      }),
      slots.chart && slots.chart(),
      slots.default && slots.default()
    ]));
  }
});
var CWidgetStatsF = defineComponent({
  name: "CWidgetStatsF",
  props: {
    color: Color,
    padding: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: void 0,
      require: false
    },
    text: {
      type: String,
      default: void 0,
      require: false
    },
    value: {
      type: [Number, String],
      default: 0,
      require: false
    }
  },
  setup(props, { slots }) {
    return () => h(CCard, {}, {
      default: () => [
        h(CCardBody, {
          class: ["d-flex align-items-center", props.padding === false && "p-0"]
        }, () => [
          h("div", {
            class: [
              "me-3",
              "text-white",
              `bg-${props.color}`,
              props.padding ? "p-3" : "p-4"
            ]
          }, slots.default && slots.default() || slots.icon && slots.icon()),
          h("div", {}, [
            (props.value || slots.value) && h("div", {
              class: [`fs-6 fw-semibold text-${props.color}`]
            }, {
              default: () => slots.value && slots.value() || props.value
            }),
            (props.title || slots.title) && h("div", {
              class: "text-medium-emphasis text-uppercase fw-semibold small"
            }, {
              default: () => slots.title && slots.title() || props.title
            })
          ])
        ]),
        slots.footer && h(CCardFooter, {}, () => slots.footer && slots.footer())
      ]
    });
  }
});
var CWidgetsStatsPlugin = {
  install: (app) => {
    app.component(CWidgetStatsA.name, CWidgetStatsA);
    app.component(CWidgetStatsB.name, CWidgetStatsB);
    app.component(CWidgetStatsC.name, CWidgetStatsC);
    app.component(CWidgetStatsD.name, CWidgetStatsD);
    app.component(CWidgetStatsE.name, CWidgetStatsE);
    app.component(CWidgetStatsF.name, CWidgetStatsF);
  }
};
var Components = Object.freeze({
  __proto__: null,
  CAccordionPlugin,
  CAccordion,
  CAccordionBody,
  CAccordionButton,
  CAccordionHeader,
  CAccordionItem,
  CAlertPlugin,
  CAlert,
  CAlertHeading,
  CAlertLink,
  CAvatarPlugin,
  CAvatar,
  CBackdropPlugin,
  CBackdrop,
  CBadge,
  CBadgePlugin,
  CBreadcrumbPlugin,
  CBreadcrumb,
  CBreadcrumbItem,
  CButtonPlugin,
  CButton,
  CButtonGroupPlugin,
  CButtonToolbar,
  CButtonGroup,
  CCalloutPlugin,
  CCallout,
  CCardPlugin,
  CCard,
  CCardBody,
  CCardFooter,
  CCardGroup,
  CCardHeader,
  CCardImage,
  CCardImageOverlay,
  CCardLink,
  CCardSubtitle,
  CCardText,
  CCardTitle,
  CCarouselPlugin,
  CCarousel,
  CCarouselCaption,
  CCarouselItem,
  CCloseButtonPlugin,
  CCloseButton,
  CCollapsePlugin,
  CCollapse,
  CDropdownPlugin,
  CDropdown,
  CDropdownItem,
  CDropdownHeader,
  CDropdownDivider,
  CDropdownMenu,
  CDropdownToggle,
  CFooterPlugin,
  CFooter,
  CFormPlugin,
  CForm,
  CFormCheck,
  CFormFeedback,
  CFormFloating,
  CFormInput,
  CFormLabel,
  CFormRange,
  CFormSelect,
  CFormSwitch,
  CFormText,
  CFormTextarea,
  CInputGroup,
  CInputGroupText,
  CGridPlugin,
  CCol,
  CContainer,
  CRow,
  CHeaderPlugin,
  CHeader,
  CHeaderBrand,
  CHeaderDivider,
  CHeaderNav,
  CHeaderText,
  CHeaderToggler,
  CImagePlugin,
  CImage,
  CCLinkPlugin,
  CLink,
  CListGroupPlugin,
  CListGroup,
  CListGroupItem,
  CModalPlugin,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalTitle,
  CNavPlugin,
  CNav,
  CNavGroup,
  CNavGroupItems,
  CNavItem,
  CNavLink,
  CNavTitle,
  CNavbarPlugin,
  CNavbar,
  CNavbarBrand,
  CNavbarNav,
  CNavbarText,
  CNavbarToggler,
  COffcanvasPlugin,
  COffcanvas,
  COffcanvasBody,
  COffcanvasHeader,
  COffcanvasTitle,
  CPaginationPlugin,
  CPagination,
  CPaginationItem,
  CPlaceholderPlugin,
  CPlaceholder,
  CProgressPlugin,
  CProgress,
  CProgressBar,
  CPopoverPlugin,
  CPopover,
  CSidebarPlugin,
  CSidebar,
  CSidebarBrand,
  CSidebarFooter,
  CSidebarHeader,
  CSidebarNav,
  CSidebarToggler,
  CSpinnerPlugin,
  CSpinner,
  CTablePlugin,
  CTable,
  CTableBody,
  CTableCaption,
  CTableDataCell,
  CTableFoot,
  CTableHead,
  CTableHeaderCell,
  CTableRow,
  CTabsPlugin,
  CTabContent,
  CTabPane,
  CToastPlugin,
  CToast,
  CToastBody,
  CToastClose,
  CToaster,
  CToastHeader,
  CTooltipPlugin,
  CTooltip,
  CWidgetsStatsPlugin,
  CWidgetStatsA,
  CWidgetStatsB,
  CWidgetStatsC,
  CWidgetStatsD,
  CWidgetStatsE,
  CWidgetStatsF
});
var BREAKPOINTS = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];
var vcplaceholder = {
  name: "c-placeholder",
  mounted(el, binding) {
    const value = binding.value;
    el.classList.add(value.animation ? `placeholder-${value.animation}` : "placeholder");
    BREAKPOINTS.forEach((bp) => {
      const breakpoint = value[bp];
      const infix = bp === "xs" ? "" : `-${bp}`;
      if (typeof breakpoint === "number") {
        el.classList.add(`col${infix}-${breakpoint}`);
      }
      if (typeof breakpoint === "boolean") {
        el.classList.add(`col${infix}`);
      }
    });
  }
};
var getUID$1 = (prefix) => {
  do {
    prefix += Math.floor(Math.random() * 1e6);
  } while (document.getElementById(prefix));
  return prefix;
};
var createPopoverElement = (id, header, content) => {
  const popover = document.createElement("div");
  popover.id = id;
  popover.classList.add("popover", "bs-popover-auto", "fade");
  popover.setAttribute("role", "popover");
  popover.innerHTML = `<div class="popover-arrow" data-popper-arrow></div>
     <div class="popover-header">${header}</div>
     <div class="popover-body" id="">${content}</div>`;
  return popover;
};
var addPopoverElement = (popover, el, popperOptions) => {
  document.body.appendChild(popover);
  createPopper(el, popover, popperOptions);
  setTimeout(() => {
    popover.classList.add("show");
  }, 1);
};
var removePopoverElement = (popover) => {
  popover.classList.remove("show");
  setTimeout(() => {
    document.body.removeChild(popover);
  }, 300);
};
var togglePopoverElement = (popover, el, popperOptions) => {
  const popperElement = document.getElementById(popover.id);
  if (popperElement && popperElement.classList.contains("show")) {
    removePopoverElement(popover);
    return;
  }
  addPopoverElement(popover, el, popperOptions);
};
var vcpopover = {
  name: "c-popover",
  uid: "",
  mounted(el, binding) {
    const value = binding.value;
    const content = typeof value === "string" ? value : value.content ? value.content : "";
    const header = value.header ? value.header : "";
    const trigger = value.trigger ? value.trigger : "click";
    const offset2 = value.offset ? value.offset : [0, 8];
    const placement = value.placement ? value.placement : "top";
    const popperOptions = {
      placement,
      modifiers: [
        {
          name: "offset",
          options: {
            offset: offset2
          }
        }
      ]
    };
    const popoverUID = getUID$1("popover");
    binding.arg = popoverUID;
    const popover = createPopoverElement(popoverUID, header, content);
    trigger.includes("click") && el.addEventListener("click", () => {
      togglePopoverElement(popover, el, popperOptions);
    });
    if (trigger.includes("focus")) {
      el.addEventListener("focus", () => {
        addPopoverElement(popover, el, popperOptions);
      });
      el.addEventListener("blur", () => {
        removePopoverElement(popover);
      });
    }
    if (trigger.includes("hover")) {
      el.addEventListener("mouseenter", () => {
        addPopoverElement(popover, el, popperOptions);
      });
      el.addEventListener("mouseleave", () => {
        removePopoverElement(popover);
      });
    }
  },
  unmounted(_el, binding) {
    const popover = binding.arg && document.getElementById(binding.arg);
    popover && popover.remove();
  }
};
var getUID = (prefix) => {
  do {
    prefix += Math.floor(Math.random() * 1e6);
  } while (document.getElementById(prefix));
  return prefix;
};
var createTooltipElement = (id, content) => {
  const tooltip = document.createElement("div");
  tooltip.id = id;
  tooltip.classList.add("tooltip", "bs-tooltip-auto", "fade");
  tooltip.setAttribute("role", "tooltip");
  tooltip.innerHTML = `<div class="tooltip-arrow" data-popper-arrow></div>
     <div class="tooltip-inner" id="">${content}</div>`;
  return tooltip;
};
var addTooltipElement = (tooltip, el, popperOptions) => {
  document.body.appendChild(tooltip);
  createPopper(el, tooltip, popperOptions);
  setTimeout(() => {
    tooltip.classList.add("show");
  }, 1);
};
var removeTooltipElement = (tooltip) => {
  tooltip.classList.remove("show");
  setTimeout(() => {
    document.body.removeChild(tooltip);
  }, 300);
};
var toggleTooltipElement = (tooltip, el, popperOptions) => {
  const popperElement = document.getElementById(tooltip.id);
  if (popperElement && popperElement.classList.contains("show")) {
    removeTooltipElement(tooltip);
    return;
  }
  addTooltipElement(tooltip, el, popperOptions);
};
var vctooltip = {
  mounted(el, binding) {
    const value = binding.value;
    const content = typeof value === "string" ? value : value.content ? value.content : "";
    const trigger = value.trigger ? value.trigger : "hover";
    const offset2 = value.offset ? value.offset : [0, 0];
    const placement = value.placement ? value.placement : "top";
    const popperOptions = {
      placement,
      modifiers: [
        {
          name: "offset",
          options: {
            offset: offset2
          }
        }
      ]
    };
    const tooltipUID = getUID("tooltip");
    binding.arg = tooltipUID;
    const tooltip = createTooltipElement(tooltipUID, content);
    trigger.includes("click") && el.addEventListener("click", () => {
      toggleTooltipElement(tooltip, el, popperOptions);
    });
    if (trigger.includes("focus")) {
      el.addEventListener("focus", () => {
        addTooltipElement(tooltip, el, popperOptions);
      });
      el.addEventListener("blur", () => {
        removeTooltipElement(tooltip);
      });
    }
    if (trigger.includes("hover")) {
      el.addEventListener("mouseenter", () => {
        addTooltipElement(tooltip, el, popperOptions);
      });
      el.addEventListener("mouseleave", () => {
        removeTooltipElement(tooltip);
      });
    }
  },
  beforeUnmount(_el, binding) {
    const tooltip = binding.arg && document.getElementById(binding.arg);
    tooltip && tooltip.remove();
  }
};
var removeKeysFromObject = (object, keys) => {
  return Object.entries(object).reduce((obj, [key, value]) => {
    if (!keys.includes(key) && !keys.includes(value.name)) {
      obj[key] = value;
    }
    return obj;
  }, {});
};
var CoreuiVue = {
  install: (app, options) => {
    let pluginComponents = Components;
    const toRemove = options && options.remove ? options.remove : null;
    if (toRemove && Array.isArray(toRemove)) {
      pluginComponents = removeKeysFromObject(Components, toRemove);
    }
    for (const plugin in pluginComponents) {
      app.component(plugin, Components[plugin]);
    }
    app.directive("c-placeholder", vcplaceholder);
    app.directive("c-popover", vcpopover);
    app.directive("c-tooltip", vctooltip);
  }
};
export {
  CAccordion,
  CAccordionBody,
  CAccordionButton,
  CAccordionHeader,
  CAccordionItem,
  CAccordionPlugin,
  CAlert,
  CAlertHeading,
  CAlertLink,
  CAlertPlugin,
  CAvatar,
  CAvatarPlugin,
  CBackdrop,
  CBackdropPlugin,
  CBadge,
  CBadgePlugin,
  CBreadcrumb,
  CBreadcrumbItem,
  CBreadcrumbPlugin,
  CButton,
  CButtonGroup,
  CButtonGroupPlugin,
  CButtonPlugin,
  CButtonToolbar,
  CCLinkPlugin,
  CCallout,
  CCalloutPlugin,
  CCard,
  CCardBody,
  CCardFooter,
  CCardGroup,
  CCardHeader,
  CCardImage,
  CCardImageOverlay,
  CCardLink,
  CCardPlugin,
  CCardSubtitle,
  CCardText,
  CCardTitle,
  CCarousel,
  CCarouselCaption,
  CCarouselItem,
  CCarouselPlugin,
  CCloseButton,
  CCloseButtonPlugin,
  CCol,
  CCollapse,
  CCollapsePlugin,
  CContainer,
  CDropdown,
  CDropdownDivider,
  CDropdownHeader,
  CDropdownItem,
  CDropdownMenu,
  CDropdownPlugin,
  CDropdownToggle,
  CFooter,
  CFooterPlugin,
  CForm,
  CFormCheck,
  CFormFeedback,
  CFormFloating,
  CFormInput,
  CFormLabel,
  CFormPlugin,
  CFormRange,
  CFormSelect,
  CFormSwitch,
  CFormText,
  CFormTextarea,
  CGridPlugin,
  CHeader,
  CHeaderBrand,
  CHeaderDivider,
  CHeaderNav,
  CHeaderPlugin,
  CHeaderText,
  CHeaderToggler,
  CImage,
  CImagePlugin,
  CInputGroup,
  CInputGroupText,
  CLink,
  CListGroup,
  CListGroupItem,
  CListGroupPlugin,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalPlugin,
  CModalTitle,
  CNav,
  CNavGroup,
  CNavGroupItems,
  CNavItem,
  CNavLink,
  CNavPlugin,
  CNavTitle,
  CNavbar,
  CNavbarBrand,
  CNavbarNav,
  CNavbarPlugin,
  CNavbarText,
  CNavbarToggler,
  COffcanvas,
  COffcanvasBody,
  COffcanvasHeader,
  COffcanvasPlugin,
  COffcanvasTitle,
  CPagination,
  CPaginationItem,
  CPaginationPlugin,
  CPlaceholder,
  CPlaceholderPlugin,
  CPopover,
  CPopoverPlugin,
  CProgress,
  CProgressBar,
  CProgressPlugin,
  CRow,
  CSidebar,
  CSidebarBrand,
  CSidebarFooter,
  CSidebarHeader,
  CSidebarNav,
  CSidebarPlugin,
  CSidebarToggler,
  CSpinner,
  CSpinnerPlugin,
  CTabContent,
  CTabPane,
  CTable,
  CTableBody,
  CTableCaption,
  CTableDataCell,
  CTableFoot,
  CTableHead,
  CTableHeaderCell,
  CTablePlugin,
  CTableRow,
  CTabsPlugin,
  CToast,
  CToastBody,
  CToastClose,
  CToastHeader,
  CToastPlugin,
  CToaster,
  CTooltip,
  CTooltipPlugin,
  CWidgetStatsA,
  CWidgetStatsB,
  CWidgetStatsC,
  CWidgetStatsD,
  CWidgetStatsE,
  CWidgetStatsF,
  CWidgetsStatsPlugin,
  CoreuiVue as default,
  vcplaceholder,
  vcpopover,
  vctooltip
};
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
//# sourceMappingURL=@coreui_vue.js.map
